[{"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/index.js":"1","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/reportWebVitals.js":"2","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/App.js":"3","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/store.js":"4","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/LoginScreen.js":"5","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/StaffHomeScreen.js":"6","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/AdviceScreen.js":"7","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/StaffNotificationScreen.js":"8","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Coursework/AddCourseworkScreen.js":"9","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Attendance/AttendanceScreen.js":"10","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Coursework/CourseworkScreen.js":"11","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/ViewStudentsScreens/DepartmentStudentScreen.js":"12","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Coursework/EditCourseworkScreen.js":"13","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/ViewStudentsScreens/AdviseesScreen.js":"14","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Attendance/SubClassAttendanceScreen.js":"15","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Reducers/studentReducers.js":"16","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Reducers/attendanceReducers.js":"17","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/CircumstanceScreen.js":"18","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/ViewStudentsScreens/StudentScreen.js":"19","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Reducers/staffReducers.js":"20","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Coursework/ManageCourseworkScreen.js":"21","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Attendance/SubAttendanceScreen.js":"22","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Reducers/courseworkReducers.js":"23","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Reducers/studentUserReducer.js":"24","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Coursework/EditCourseworkGradeScreen.js":"25","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Reducers/classReducers.js":"26","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Profiles/SuperProfileScreen.js":"27","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Navigation/LoggedOutNav.js":"28","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Navigation/StudentNavbar.js":"29","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Coursework/CourseworkCSVScreen.js":"30","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Utilities/StaffRoute.js":"31","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Reducers/lectureReducers.js":"32","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Profiles/StudentClassProfile.js":"33","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Navigation/StaffNavbar.js":"34","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Utilities/AdviceBox.js":"35","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Actions/studentActions.js":"36","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Actions/studentUserActions.js":"37","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Actions/staffUserActions.js":"38","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/LoginForms/StaffLoginForm.js":"39","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Actions/classActions.js":"40","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/LoginForms/StudentLoginForm.js":"41","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Actions/courseworkActions.js":"42","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Feedback/NoticationCard.js":"43","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Constants/studentConstants.js":"44","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Constants/lectureConstants.js":"45","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Constants/courseworkConstants.js":"46","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Indicators/NotificationBell.js":"47","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Indicators/UserProfileIcon.js":"48","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/ClassProfileComponents/AttendanceInfo.js":"49","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/ClassProfileComponents/GeneralInfo.js":"50","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Functions/generatePDF.js":"51","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/SuperProfileComponents/Overview.js":"52","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/SuperProfileComponents/ClassOverview.js":"53","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Constants/classConstants.js":"54","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Constants/studentUserConstants.js":"55","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Feedback/CourseworkFeedback.js":"56","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Feedback/AttendanceFeedback.js":"57","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Constants/staffUserConstants.js":"58","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Indicators/StatsIndicator.js":"59","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Actions/lectureActions.js":"60","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Indicators/MarksIndicator.js":"61","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Constants/attendanceConstants.js":"62","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Utilities/LectureQR.js":"63","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Utilities/LectureCSV.js":"64","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Tables/tableStyle.js":"65","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Tables/ManualAttendanceTable.js":"66","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Tables/StudentSuperTable.js":"67","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Tables/DisplayAttendanceCSV.js":"68","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Attendance/TakeAttendanceQR.js":"69","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Feedback/DepartmentNotificationCard.js":"70","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Indicators/StudentNotificationBell.js":"71","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/StudentNotificationScreen.js":"72","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/LoginForms/StaffRegister.js":"73","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Utilities/StudentRoute.js":"74"},{"size":627,"mtime":1616715002027,"results":"75","hashOfConfig":"76"},{"size":362,"mtime":1615295548000,"results":"77","hashOfConfig":"76"},{"size":7532,"mtime":1616714736475,"results":"78","hashOfConfig":"76"},{"size":4180,"mtime":1616905200920,"results":"79","hashOfConfig":"76"},{"size":945,"mtime":1616996004550,"results":"80","hashOfConfig":"76"},{"size":788,"mtime":1616996004550,"results":"81","hashOfConfig":"76"},{"size":2212,"mtime":1616996224125,"results":"82","hashOfConfig":"76"},{"size":4768,"mtime":1616995711653,"results":"83","hashOfConfig":"76"},{"size":7176,"mtime":1616996588225,"results":"84","hashOfConfig":"76"},{"size":10421,"mtime":1616995003559,"results":"85","hashOfConfig":"76"},{"size":3352,"mtime":1616893740498,"results":"86","hashOfConfig":"76"},{"size":1511,"mtime":1616996224073,"results":"87","hashOfConfig":"76"},{"size":9410,"mtime":1616893740494,"results":"88","hashOfConfig":"76"},{"size":1158,"mtime":1616996224069,"results":"89","hashOfConfig":"76"},{"size":2341,"mtime":1616964378079,"results":"90","hashOfConfig":"76"},{"size":2969,"mtime":1615652724895,"results":"91","hashOfConfig":"76"},{"size":557,"mtime":1615295548000,"results":"92","hashOfConfig":"76"},{"size":8449,"mtime":1616996004550,"results":"93","hashOfConfig":"76"},{"size":6861,"mtime":1616893740490,"results":"94","hashOfConfig":"76"},{"size":2147,"mtime":1616033571273,"results":"95","hashOfConfig":"76"},{"size":3738,"mtime":1616996588213,"results":"96","hashOfConfig":"76"},{"size":7117,"mtime":1616964378079,"results":"97","hashOfConfig":"76"},{"size":5622,"mtime":1616964286230,"results":"98","hashOfConfig":"76"},{"size":2952,"mtime":1616629541642,"results":"99","hashOfConfig":"76"},{"size":4500,"mtime":1616996588229,"results":"100","hashOfConfig":"76"},{"size":2830,"mtime":1615295548000,"results":"101","hashOfConfig":"76"},{"size":3159,"mtime":1616996224073,"results":"102","hashOfConfig":"76"},{"size":379,"mtime":1616962423836,"results":"103","hashOfConfig":"76"},{"size":3103,"mtime":1616962423836,"results":"104","hashOfConfig":"76"},{"size":5577,"mtime":1616998033494,"results":"105","hashOfConfig":"76"},{"size":753,"mtime":1616963904860,"results":"106","hashOfConfig":"76"},{"size":5078,"mtime":1616637635670,"results":"107","hashOfConfig":"76"},{"size":3144,"mtime":1616892819290,"results":"108","hashOfConfig":"76"},{"size":7363,"mtime":1616962423836,"results":"109","hashOfConfig":"76"},{"size":1363,"mtime":1616963392068,"results":"110","hashOfConfig":"76"},{"size":4996,"mtime":1616959801507,"results":"111","hashOfConfig":"76"},{"size":4892,"mtime":1616960057879,"results":"112","hashOfConfig":"76"},{"size":3561,"mtime":1616959801511,"results":"113","hashOfConfig":"76"},{"size":2858,"mtime":1616962138668,"results":"114","hashOfConfig":"76"},{"size":1655,"mtime":1616905624152,"results":"115","hashOfConfig":"76"},{"size":2926,"mtime":1616962314556,"results":"116","hashOfConfig":"76"},{"size":8472,"mtime":1616906289509,"results":"117","hashOfConfig":"76"},{"size":1287,"mtime":1616960666896,"results":"118","hashOfConfig":"76"},{"size":1334,"mtime":1616964089078,"results":"119","hashOfConfig":"76"},{"size":2323,"mtime":1616964089078,"results":"120","hashOfConfig":"76"},{"size":2657,"mtime":1616964089086,"results":"121","hashOfConfig":"76"},{"size":2313,"mtime":1616961148873,"results":"122","hashOfConfig":"76"},{"size":513,"mtime":1616962019652,"results":"123","hashOfConfig":"76"},{"size":3686,"mtime":1616960530352,"results":"124","hashOfConfig":"76"},{"size":4453,"mtime":1616994065046,"results":"125","hashOfConfig":"76"},{"size":5584,"mtime":1616964286230,"results":"126","hashOfConfig":"76"},{"size":3752,"mtime":1616994321128,"results":"127","hashOfConfig":"76"},{"size":3633,"mtime":1616963129200,"results":"128","hashOfConfig":"76"},{"size":1152,"mtime":1616964089078,"results":"129","hashOfConfig":"76"},{"size":1467,"mtime":1616964089078,"results":"130","hashOfConfig":"76"},{"size":1361,"mtime":1616960527952,"results":"131","hashOfConfig":"76"},{"size":1423,"mtime":1616960530348,"results":"132","hashOfConfig":"76"},{"size":963,"mtime":1616964089078,"results":"133","hashOfConfig":"76"},{"size":559,"mtime":1616961148873,"results":"134","hashOfConfig":"76"},{"size":7572,"mtime":1616958846765,"results":"135","hashOfConfig":"76"},{"size":1121,"mtime":1616960861068,"results":"136","hashOfConfig":"76"},{"size":203,"mtime":1615295548000,"results":"137","hashOfConfig":"76"},{"size":628,"mtime":1616994775840,"results":"138","hashOfConfig":"76"},{"size":5770,"mtime":1616998509723,"results":"139","hashOfConfig":"76"},{"size":711,"mtime":1616963294024,"results":"140","hashOfConfig":"76"},{"size":3679,"mtime":1616963129200,"results":"141","hashOfConfig":"76"},{"size":5334,"mtime":1616963129196,"results":"142","hashOfConfig":"76"},{"size":3160,"mtime":1616963129196,"results":"143","hashOfConfig":"76"},{"size":2371,"mtime":1616997976986,"results":"144","hashOfConfig":"76"},{"size":1984,"mtime":1616960666896,"results":"145","hashOfConfig":"76"},{"size":1882,"mtime":1616961148873,"results":"146","hashOfConfig":"76"},{"size":1819,"mtime":1616906368709,"results":"147","hashOfConfig":"76"},{"size":2987,"mtime":1616962230192,"results":"148","hashOfConfig":"76"},{"size":771,"mtime":1616963904860,"results":"149","hashOfConfig":"76"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},"15oyx2h",{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"152"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"152"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"152"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"152"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"152"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"152"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"152"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"152"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"152"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"152"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"152"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"152"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"152"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"152"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"152"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"152"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"152"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"152"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"152"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"152"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"152"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"285"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"152"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"193"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"152"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"152"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"152"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"152"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"152"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"152"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"152"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/index.js",[],["330","331"],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/reportWebVitals.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/App.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/store.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/LoginScreen.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/StaffHomeScreen.js",["332","333","334","335","336","337","338"],"/**\n * Home screen for staff, displays simple message\n */\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Card from \"react-bootstrap/Card\"\nimport { FaGraduationCap } from \"react-icons/fa\";\n\nexport default function HomeScreen() {\n  const staffSignIn = useSelector((state) => state.staffSignIn);\n  const studentSignIn = useSelector((state) => state.studentSignIn);\n  const { loading, staffInfo, error } = staffSignIn;\n  const { studentLoading, studentInfo, studentError } = studentSignIn;\n\n  return (\n      <div className =\"home-container\">\n        <div className = \"home-message\">\n        <h1>Welcome!</h1>\n        <h2>You are logged in as university staff.</h2>\n        <FaGraduationCap style={{fontSize : \"xx-large\"}} />\n      </div>\n      </div>\n      )\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/AdviceScreen.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/StaffNotificationScreen.js",["339","340","341","342","343","344"],"import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Card from \"react-bootstrap/Card\";\nimport NotificationCard from \"../Components/Feedback/NoticationCard\";\nimport DepartmentNotificationCard from \"../Components/Feedback/DepartmentNotificationCard\"\nimport Tab from 'react-bootstrap/Tab'\nimport Tabs from 'react-bootstrap/Tabs'\nimport Alert from 'react-bootstrap/Alert'\n\n/*\nA screen component to display staff notifications\nNotifications are split into different tabs for advisors, teachers and departmental staff\n*/\n\nexport default function StaffNoticationScreen() {\n\n  /* As notifications are gathered on load, we can get these from the state */\n\n  const notes = useSelector((state) => state.notifications);\n  const { notifications, error } = notes;\n  console.log(notifications);\n\n  return (\n    <>\n      {error ? <Alert variant=\"danger\">Error retrieving notifications!</Alert> : null}\n\n      {!notifications ? <Alert variant=\"warning\">No notifications!</Alert> : (\n        <div style={{ textAlign: \"-webkit-center\" }}>\n          <div style={{ padding: \"2rem\", justifyContent: \"center\", maxWidth: \"900px\" }}>\n\n            <Tabs style={{ marginBottom: \"1rem\" }} id=\"notification-type-tabs\">\n\n              {!notifications.classes ? null :\n                <Tab key=\"class-notifications\"\n                  eventKey=\"class-notifications\"\n                  title=\"Classes\">\n\n                  <Card>\n                    <Card.Header>Class Notifications</Card.Header>\n                    <Card.Body style={{ padding: \"1rem\" }}>\n                      <Tabs style={{ marginBottom: \"1rem\" }} id=\"class-notification-tabs\">\n                        {notifications.classes.map((element, index) => (\n                          (!element.low_attendances || element.low_attendances.length == 0) && (!element.low_grades || element.low_grades.length == 0) ? null :\n                            <Tab\n                              key={element.class_code}\n                              eventKey={element.class_code + \"-tab\"}\n                              title={element.class_code.toUpperCase()}\n                            >\n                              {element.low_attendances.map((e, i) =>\n                                <NotificationCard type=\"attendance\" key={i} data={e} />\n                              )}\n                              {element.low_grades.map((e, i) =>\n                                <NotificationCard type=\"average grade\" key={i} data={e} />\n                              )}\n                            </Tab>\n                        ))}\n                      </Tabs>\n                    </Card.Body>\n                  </Card>\n\n                </Tab>\n              }\n\n              {!notifications.departments || notifications.departments.length == 0 ? null :\n\n                <Tab key=\"department-notifications\"\n                  eventKey=\"department-notifications\"\n                  title=\"Departments\">\n\n                  <Card>\n                    <Card.Header>Department Notifications</Card.Header>\n                    <Card.Body style={{ padding: \"1rem\" }}>\n                      {notifications.departments.map((element, index) => (\n                        element.department_notifications.length == 0 ?\n                          <Alert style={{ margin: \"0rem\", textAlign: \"center\" }} variant=\"warning\">No notifications for this department!</Alert>\n                          : element.department_notifications.map((e, i) =>\n                            <DepartmentNotificationCard data={e} />\n                          )\n                      ))}\n                    </Card.Body>\n                  </Card>\n\n                </Tab>\n              }\n\n              {!notifications.students || notifications.students.length == 0 ? null :\n\n                <Tab key=\"advisee-notifications\"\n                  eventKey=\"advisee-notifications\"\n                  title=\"Advisees\">\n\n                  <Card>\n                    <Card.Header>Advisees Notifications</Card.Header>\n                    <Card.Body style={{ padding: \"1rem\" }}>\n                      {notifications.students.length == 0 ?\n                        <Alert style={{ margin: \"0rem\", textAlign: \"center\" }} variant=\"warning\">No notifications from your advisees!</Alert> :\n                        <>\n                          {notifications.students.map((element, index) => (\n                            <DepartmentNotificationCard key={index} data={element.department_notifications[0]} />\n\n                          )\n                          )}\n                        </>\n                      }\n                    </Card.Body>\n                  </Card>\n\n                </Tab>\n              }\n            </Tabs>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Coursework/AddCourseworkScreen.js",["345"],"/**\n * Screen for adding a coursework to the db.\n */\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addCoursework, getClassCoursework } from \"../../Actions/courseworkActions\";\nimport { Link } from \"react-router-dom\";\nimport { ADD_COURSEWORK_RESET } from \"../../Constants/courseworkConstants\";\nimport { CSSTransition } from \"react-transition-group\";\n\nexport default function AddCourseworkScreen() {\n  let { class_code } = useParams();\n\n  const addCW = useSelector((state) => state.addCourseworkToDB);\n  const dispatch = useDispatch();\n  const { session, error } = addCW;\n\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [weight, setWeight] = useState(\"\");\n\n  const [submit, setSubmit] = useState(false);\n\n  const [titleError, setTitleError] = useState(\"\");\n  const [descriptionError, setDescriptionError] = useState(\"\");\n  const [weightError, setWeightError] = useState(\"\");\n\n  const allCW = useSelector((state) => state.classCoursework);\n  const { totalWeight } = allCW;\n\n  const [validated, setValidated] = useState(false);\n\n\n  useEffect(() => {\n    dispatch(getClassCoursework(class_code));\n    if (validated) {\n      dispatch(addCoursework(title, description, class_code, weight));\n    }\n\n    return function cleanup() {\n      dispatch({ type: ADD_COURSEWORK_RESET });\n    };\n  }, [dispatch, validated]);\n\n  function validateInputs() {\n    var titleOK = false;\n    var descriptionOK = false;\n    var weightOK = false;\n\n    /* VALIDATE TITLE */\n\n    if (title === \"\" || title == null) {\n      setTitleError(\"Please enter a title.\");\n    } else {\n      setTitleError(\"\");\n      titleOK = true;\n    }\n\n    /* VALIDATE DESCRIPTION */\n\n    if (description === \"\" || description == null) {\n      setDescriptionError(\"Please enter a description\");\n    } else {\n      setDescriptionError(\"\");\n      descriptionOK = true;\n    }\n\n    /* VALIDATE WEIGHT */\n\n    if (weight === \"\" || weight == null) {\n      setWeightError(\"Please enter a weight\");\n    } else if (weight < 0 || weight > 100) {\n      setWeightError(\"Your weight must be between 0 and 100.\");\n    } else if (isNaN(weight)) {\n      setWeightError(\"Please enter a valid number.\");\n    } else if (Number(totalWeight) + Number(weight) > 100) {\n      setWeightError(\"Current coursework adds up to \" + totalWeight + \"%. This needs to be \" + (100 - totalWeight) + \"% or lower.\")\n    } else {\n      setWeightError(\"\");\n      weightOK = true;\n    }\n\n    /* EITHER TRUE IF ALL ARE VALIDATED OR FALSE */\n\n    if (titleOK === true && descriptionOK === true && weightOK === true) {\n      setValidated(true);\n      setSubmit(true);\n    } else {\n      setValidated(false);\n    }\n  }\n\n  function handleTitleChange(e) {\n    setTitle(e.target.value);\n  }\n\n  function handleDescriptionChange(e) {\n    setDescription(e.target.value);\n  }\n\n  function handleWeightChange(e) {\n    setWeight(e.target.value);\n  }\n\n  function reset() {\n    setWeight(\"\");\n    setTitle(\"\");\n    setDescription(\"\");\n    setValidated(false);\n    setSubmit(false);\n  }\n\n  return (\n    <CSSTransition appear={true} in={true} timeout={300} classNames=\"fade\">\n      <div className=\"default-padding\">\n        <Card style={{ marginLeft: \"auto\", marginRight: \"auto\" }}>\n          <Card.Header>\n            Adding Coursework for {class_code.toUpperCase()}\n          </Card.Header>\n          {error ? <Alert variant = \"danger\">{error.message}</Alert> : null}\n          <Card.Body>\n            <Form className=\"add-coursework-form\">\n              Coursework Title:\n              <Form.Control\n                value={title}\n                disabled={submit}\n                className={\n                  titleError === \"\" ? \"search-bar\" : \"search-bar error\"\n                }\n                onChange={handleTitleChange}\n                type=\"text\"\n              ></Form.Control>\n              <span className=\"error-message\">{titleError}</span> <br />\n              Description:\n              <Form.Control\n                value={description}\n                disabled={submit}\n                as=\"textarea\"\n                className={\n                  descriptionError === \"\" ? \"search-bar\" : \"search-bar error\"\n                }\n                rows=\"4\"\n                onChange={handleDescriptionChange}\n                type=\"textarea\"\n              ></Form.Control>\n              <span className=\"error-message\">{descriptionError}</span>\n              <br />\n              Percentage of Grade:\n              <InputGroup className=\"mb-2\">\n                <Form.Control\n                  value={weight}\n                  disabled={submit}\n                  className={\n                    weightError === \"\" ? \"search-bar\" : \"search-bar error\"\n                  }\n                  onChange={handleWeightChange}\n                  type=\"text\"\n                ></Form.Control>\n                <InputGroup.Append>\n                  <InputGroup.Text className=\"percentage-prepend\">\n                    %\n                  </InputGroup.Text>\n                </InputGroup.Append>\n              </InputGroup>\n              <span className=\"error-message\">{weightError}</span> <br />\n              {session ? null : (\n                <Button className=\"button\" onClick={() => validateInputs()}>\n                  Add Coursework\n                </Button>\n              )}\n              {session ? (\n                <div>\n                  <Alert variant=\"success\">\n                    Coursework added with ID #{session.data.id}\n                  </Alert>\n                  <div className=\"add-coursework-button-container\">\n                    <Button\n                      style={{ justifyContent: \"center\" }}\n                      className=\"profile-button\"\n                      onClick={() => reset()}\n                    >\n                      Add Another\n                    </Button>\n                    <Link\n                      style={{ padding: \"0rem\" }}\n                      to={\n                        \"/coursework/\" +\n                        class_code +\n                        \"/grades/\" +\n                        session.data.id\n                      }\n                    >\n                      <Button\n                        style={{ justifyContent: \"center\", width: \"100%\" }}\n                        className=\"profile-button\"\n                      >\n                        Add Grades\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              ) : null}\n              <Link\n                style={{ padding: \"0\", marginTop: \"1rem\" }}\n                to={\"/coursework/\" + class_code}\n              >\n                <Button className=\"button \">Return to Coursework Page</Button>\n              </Link>\n            </Form>\n          </Card.Body>\n        </Card>\n      </div>\n    </CSSTransition>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Attendance/AttendanceScreen.js",["346","347"],"/**\n * Main screen for attendance. Displays user with datepickers and submission to create lecture\n * Upon successful entry into database, they are presented with tabs to choose their method of \n * taking attendance.\n * The methods of taking components are seperate components.\n */\n\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\n\nimport ManualAttendanceTable from \"../../Components/Tables/ManualAttendanceTable\";\nimport { addLecture, defaultAttendance } from \"../../Actions/lectureActions\";\nimport {\n  ADD_LECTURE_RESET,\n  LOG_ATTENDANCE_RESET,\n} from \"../../Constants/lectureConstants\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport LectureQR from \"../../Components/Utilities/LectureQR\";\nimport LectureCSV from \"../../Components/Utilities/LectureCSV\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport { FaUndo } from \"react-icons/fa\";\n\nimport { listStudentsInClass } from \"../../Actions/classActions\";\nimport DisplayAttendanceCSV from \"../../Components/Tables/DisplayAttendanceCSV\";\n\nimport { CSSTransition } from \"react-transition-group\";\nimport moment from \"moment\"\n\nexport default function ManualLectureAttendanceScreen() {\n  const dispatch = useDispatch();\n  const staffSignIn = useSelector((state) => state.staffSignIn);\n  const lecture = useSelector((state) => state.addLectureToDB);\n  const { classes: lectureDone } = lecture;\n  const classList = useSelector((state) => state.studentClassList);\n  const { students, error } = classList;\n  const attendance = useSelector((state) => state.logLectureAttendance);\n  const { success: attendanceSuccess } = attendance;\n\n  let { class_code} = useParams();\n\n  /* State initialisation */\n  const [startDate, setStartDate] = useState(false);\n  const [startTime, setStartTime] = useState(false);\n  const [dateValidated, setDateValidated] = useState(null);\n  const [timeValidated, setTimeValidated] = useState(null);\n  const [qrConfirmed, setQRConfirmed] = useState(false);\n\n  useEffect(() => {\n    /* reinitialise state if lecture has been created or attendance has been submitted*/\n    if (attendanceSuccess || lectureDone) {\n      setStartDate(false);\n      setStartTime(false);\n      setDateValidated(null);\n      setTimeValidated(null);\n      dispatch({ type: ADD_LECTURE_RESET });\n      dispatch({ type: LOG_ATTENDANCE_RESET });\n      dispatch(listStudentsInClass(class_code, staffSignIn.staffInfo.token));\n    } else if (timeValidated && dateValidated) {\n      dispatch(\n        addLecture(\n          class_code,\n          startDate.toISOString().split(\"T\")[0],\n          startTime.toISOString().split(\"T\")[1].substring(0, 8)\n        )\n      );\n    }\n    if (!students || students.data.class_code !== class_code) {\n      dispatch(listStudentsInClass(class_code, staffSignIn.staffInfo.token));\n    }\n\n    /* if component unmounts (clears), reset the attendance and lecture state */\n    return function cleanup() {\n      dispatch({ type: ADD_LECTURE_RESET });\n      dispatch({ type: LOG_ATTENDANCE_RESET });\n    }\n  }, [timeValidated, dateValidated, dispatch, class_code]);\n\n  /**\n   * Error checking for the dates. The datepicker does the error checking itself\n   * for ensuring the user does not enter a date in the future or too far\n   * (1+) years in the past. Otherwise set as validated so that lecture can be dispatched\n   * and added.\n   */\n  function handleAddLectureClick() {\n    if (!startDate) {\n      setDateValidated(false);\n    } else {\n      setDateValidated(true);\n    }\n\n    if (!startTime) {\n      setTimeValidated(false);\n    } else {\n      setTimeValidated(true);\n    }\n  }\n\n  /**\n   * Undo function was added incase the user adds the wrong data. This function just\n   * clears the all related states.\n   */\n  function handleUndoClick() {\n    setDateValidated(false);\n    setTimeValidated(false);\n    dispatch({ type: LOG_ATTENDANCE_RESET });\n    dispatch({ type: ADD_LECTURE_RESET });\n  }\n\n  /**\n   * \n   * @param {*} session_id\n   * If QR option is selected then dispatch an action to the serverside so that all students are\n   * marked absent until they log their own attendance.\n   * Confirming QR as attendance taking method disables other methods.\n   */\n  function handleQRClick(session_id) {\n    setQRConfirmed(true);\n    var temp = [];\n    for (var i = 0; i < students.data.students.length; i++) {\n      temp.push({student_id : students.data.students[i].matric, session_id : session_id, attended: 0})\n    } \n    dispatch(defaultAttendance(temp));\n  }\n\n  return (\n    error ? <Alert style = {{marginTop: \"2rem\"}} variant = \"danger\">{error}</Alert> :\n    <CSSTransition appear={true} in={true} timeout={300} classNames=\"fade\">\n      <div\n        style={{ flexDirection: \"column\" }}\n        className=\"page-margin default-padding\"\n      >\n        <Card style={{ margin: \"auto\" }}>\n          <Card.Header>{class_code.toUpperCase()} - Lecture</Card.Header>\n          <Card.Body className=\"manual-attendance-card\">\n            {students && students.data && students.data.students.length == 0 ?\n              <Alert style={{ margin: \"1rem\" }} variant=\"warning\">There are no students enrolled in this class!</Alert>\n              :\n              <div className=\"time-date-select-wrapper\">\n                <div>\n                  Date: <br />\n                  <DatePicker\n                    chooseDayAriaLabelPrefix=\"lecture-date\"\n                    ariaLabelledBy=\"lecture-date\"\n                    minDate = {moment().subtract(1, \"year\").toDate() /** Limits lower user selection to today minus 1 year */}\n                    maxDate = {moment().toDate() /** Limits upper user selection to today */}\n                    selected={startDate}\n                    onChange={(date) => setStartDate(date)}\n                    disabled={lectureDone}\n                  />\n                  {dateValidated === false ? \"Please enter a date\" : \" \"}\n                </div>\n\n                <div>\n                  Time: <br />\n                  <DatePicker\n                    ariaLabelClose=\"lecture-time\"\n                    selected={startTime}\n                    onChange={(time) => setStartTime(time)}\n                    showTimeSelect\n                    showTimeSelectOnly\n                    timeIntervals={60}\n                    timeCaption=\"Time\"\n                    dateFormat=\"h aa\"\n                    disabled={lectureDone}\n                  />\n                  {timeValidated === false ? \"Please enter a time\" : \" \"}\n                </div>\n\n                {/* EITHER CREATE LECTURE OR DISPLAY ALERT THAT LECTURE HAS BEEN (UN)SUCCESSFULLY CREATED */}\n\n                {lectureDone ? (\n                  <div className=\"flex lecture-alert-container\">\n                    <Alert className=\"lecture-alert\" variant=\"success\">\n                      Lecture created!\n                  </Alert>\n                    <Button\n                      onClick={() => handleUndoClick()}\n                      className=\"dark-button margin-left-auto\"\n                    >\n                      <FaUndo />\n                    </Button>\n                  </div>\n                ) : (\n                    <Button\n                      aria-label=\"submit-lecture-button\"\n                      onClick={() => handleAddLectureClick()}\n                      className=\"button\"\n                    >\n                      Create Lecture\n                    </Button>\n                  )}\n              </div>\n            }\n          </Card.Body>\n        </Card>\n\n        {attendanceSuccess ? (\n          <Card\n            style={{\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              marginTop: \"1rem\",\n            }}\n          >\n            <DisplayAttendanceCSV session_id={lectureDone.data.id} />\n          </Card>\n        ) : lectureDone && !attendanceSuccess ? (\n          <CSSTransition\n            appear={true}\n            in={true}\n            timeout={300}\n            classNames=\"fade\"\n          >\n            <div>\n              <Card\n                style={{\n                  marginLeft: \"auto\",\n                  marginRight: \"auto\",\n                  marginTop: \"1rem\",\n                }}\n              >\n                <Tabs className=\"attendance-tabs\" defaultActiveKey=\"manual\">\n                  {qrConfirmed ? null :\n                    <Tab eventKey=\"manual\" title=\"Manual\">\n                      <div className=\"max-width-900\">\n                        <ManualAttendanceTable\n                          session_id={lectureDone.data.id}\n                          className=\"manual-table\"\n                          class_code={class_code}\n                        />{\" \"}\n                      </div>\n                    </Tab>\n                  }\n                  <Tab eventKey=\"qr\" title=\"QR Code\">\n                    <div className=\"max-width-900\">\n                      {qrConfirmed ? null :\n                        <>\n                        <Alert variant = \"info\">Click confirm to log attendance via QR Code. This will log your students as absent until they check in!</Alert>\n                        <Button style={{marginLeft: \"auto\", marginRight: \"auto\", marginBottom: \"1rem\"}} className=\"profile-button\" onClick={() => handleQRClick(lectureDone.data.id)}>Confirm</Button>\n                        </>\n                      }\n                      <LectureQR\n                        confirmed={qrConfirmed}\n                        session_id={lectureDone.data.id}\n                        class_code={class_code}\n                      />\n                    </div>\n                  </Tab>\n                  {qrConfirmed ? null :\n                    <Tab eventKey=\"csv\" title=\"Upload CSV\">\n                      <div className=\"max-width-900\">\n                        <LectureCSV\n                          session_id={lectureDone.data.id}\n                          class_code={class_code}\n                        />{\" \"}\n                      </div>\n                    </Tab>\n                  }\n                </Tabs>\n              </Card>\n            </div>\n          </CSSTransition>\n        ) : null}\n      </div>\n    </CSSTransition>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Coursework/CourseworkScreen.js",["348","349"],"import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport { useParams } from \"react-router\";\nimport DataTable from \"react-data-table-component\";\nimport { customStyles } from \"../../Components/Tables/tableStyle\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getClassCoursework } from \"../../Actions/courseworkActions\";\nimport { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport { CgFileDocument } from \"react-icons/cg\";\nimport { GET_CLASS_COURSEWORK_RESET } from \"../../Constants/courseworkConstants\";\nimport { CSSTransition } from \"react-transition-group\";\nimport Alert from \"react-bootstrap/Alert\"\n\nexport default function CourseworkScreen() {\n  let { class_code } = useParams();\n  const dispatch = useDispatch();\n\n  const staffSignIn = useSelector((state) => state.staffSignIn);\n  const cw = useSelector((state) => state.classCoursework);\n  const { classes, error } = cw;\n\n\n  useEffect(() => {\n    dispatch(getClassCoursework(class_code, staffSignIn.staffInfo.token));\n\n    return function cleanup() {\n      dispatch({ type: GET_CLASS_COURSEWORK_RESET });\n    };\n  }, [class_code, dispatch]);\n\n  const columns = [\n    { name: \"Title\", selector: \"title\", sortable: true },\n    {\n      name: \"\",\n      selector: \"id\",\n      sortable: false,\n      cell: (row) => (\n        <div className=\"button-container margin-left-auto\">\n          <Link\n            to={{pathname : \"/coursework/\" + class_code.toLowerCase() + \"/grades/\" + row.id}}\n          >\n            <Button style={{marginLeft : \"1rem\"}} className=\"profile-button\">\n              Manage Grades <CgFileDocument />\n            </Button>\n          </Link>\n\n          <Link\n            to={{pathname : \"/coursework/\" + class_code.toLowerCase() + \"/edit/\" + row.id}}\n          >\n            <Button className=\"profile-button edit hidden-xs\">\n              <span className=\"hidden-sm\">Edit</span>\n              <AiOutlineEdit />\n            </Button>\n          </Link>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    error ? <Alert style = {{marginTop: \"1rem\"}} variant = \"danger\">{error}</Alert> : !classes ? null : \n    <CSSTransition appear={true} in={classes} timeout={300} classNames=\"fade\">\n      <div className=\"coursework-screen-layout\">\n        <Card className=\"fit-height\">\n          <Link to={{pathname : \"/coursework/\" + class_code.toLowerCase() + \"/addcw\"}}>\n            <Button className=\"button\">Add Coursework + </Button>\n          </Link>\n        </Card>\n\n        <Card>\n          <Card.Header>Coursework for {class_code.toUpperCase()}</Card.Header>\n\n          <Card.Body>\n            {!classes.data || classes.data.length == 0 ? (\n              <Alert style={{margin: \"1rem\", textAlign: \"center\"}} variant=\"warning\">\n                No coursework has been added for this class yet!\n              </Alert>\n            ) : (\n              <DataTable\n                noHeader={true}\n                className=\"data-table\"\n                columns={columns}\n                data={cw.classes.data}\n                customStyles={customStyles}\n                noContextMenu=\"true\"\n                noDataComponent={null}\n              />\n            )}\n          </Card.Body>\n        </Card>\n      </div>\n    </CSSTransition>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/ViewStudentsScreens/DepartmentStudentScreen.js",["350","351"],"/**\n * Action dispatched to get all students in a department before\n * being passed into supertable component\n */\n\nimport React, { useEffect, useState } from \"react\";\nimport { getDepartmentStudents } from \"../../Actions/studentActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport StudentSuperTable from \"../../Components/Tables/StudentSuperTable\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { useParams } from \"react-router-dom\";\nimport Alert from \"react-bootstrap/Alert\"\nimport Spinner from \"react-bootstrap/Spinner\"\n\nexport default function DepartmentScreen() {\n  let { id } = useParams();\n\n  const dispatch = useDispatch();\n  const students = useSelector((state) => state.departmentStudents);\n  const staffSignIn = useSelector((state) => state.staffSignIn);\n  const { loading, details, error } = students\n\n  useEffect(() => {\n    dispatch(getDepartmentStudents(id))\n  }, [id, dispatch])\n\n  return (\n    <>\n      {loading ? <Spinner animation=\"border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner> : error ?\n          <div className=\"center-alert-container\">\n            <Alert className=\"center-alert\" variant=\"danger\">{error}</Alert>\n          </div>\n          : details ? (\n            <CSSTransition appear={true} in={true} timeout={300} classNames=\"fade\">\n              <StudentSuperTable table_header={\"Department - \" + id.toUpperCase()} data={details.data} />\n            </CSSTransition>\n          ) : null}\n    </>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Coursework/EditCourseworkScreen.js",["352","353","354","355","356","357","358","359","360","361","362","363","364","365"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport {\n  getClassCoursework,\n  getCourseworkByID,\n  deleteCoursework,\n  updateCoursework,\n} from \"../../Actions/courseworkActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport { Link } from \"react-router-dom\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\nimport {\n  GET_COURSEWORK_BY_ID_RESET,\n  DELETE_COURSEWORK_RESET,\n  UPDATE_COURSEWORK_RESET,\n} from \"../../Constants/courseworkConstants\";\nimport { CSSTransition } from \"react-transition-group\";\n\nexport default function EditCourseworkScreen(props) {\n  const dispatch = useDispatch();\n\n  const cw = useSelector((state) => state.coursework);\n  const { classes: currentCoursework, error: courseworkError } = cw;\n  const update = useSelector((state) => state.updateCoursework);\n  const { success: updateSuccess } = update;\n  const deleteCW = useSelector((state) => state.courseworkDelete);\n  const { success: deleteSuccess } = deleteCW;\n  const allCW = useSelector((state) => state.classCoursework);\n  const { totalWeight } = allCW;\n\n  const { class_code, id } = useParams();\n\n  const [doubleCheckDelete, setDoubleCheckDelete] = useState(false);\n  const [description, setDescription] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [weight, setWeight] = useState(\"\");\n  const [weightError, setWeightError] = useState(\"\");\n  const [descriptionError, setDescriptionError] = useState(\"\");\n  const [titleError, setTitleError] = useState(\"\");\n  const [submit, setSubmit] = useState(false);\n\n  useEffect(() => {\n    if (\n      deleteSuccess ||\n      updateSuccess ||\n      !currentCoursework ||\n      id != currentCoursework.data.id\n    ) {\n      dispatch(getCourseworkByID(id, class_code));\n      dispatch(getClassCoursework(class_code));\n      dispatch({ type: DELETE_COURSEWORK_RESET });\n      dispatch({ type: UPDATE_COURSEWORK_RESET });\n    } else {\n      setWeight(currentCoursework.data.weight);\n      setDescription(currentCoursework.data.coursework_description);\n      setTitle(currentCoursework.data.title);\n    }\n\n    return function cleanup() {\n      //dispatch({ type: GET_COURSEWORK_BY_ID_RESET });\n      //dispatch({ type: DELETE_COURSEWORK_RESET });\n      //dispatch({ type: UPDATE_COURSEWORK_RESET });\n    }\n  }, [dispatch, id, class_code, currentCoursework]);\n\n\n\n  function handleTitleChange(e) {\n    setTitle(e.target.value);\n  }\n\n  function handleWeightChange(e) {\n    setWeight(e.target.value);\n  }\n\n  function handleDescriptionChange(e) {\n    setDescription(e.target.value);\n  }\n\n  function validateInputs(e) {\n    var titleOK = false;\n    var descriptionOK = false;\n    var weightOK = false;\n\n    /* VALIDATE TITLE */\n\n    if (title == \"\" || title == null) {\n      setTitleError(\"Please enter a title.\");\n    } else {\n      setTitleError(\"\");\n      titleOK = true;\n    }\n\n    /* VALIDATE DESCRIPTION */\n\n    if (description == \"\" || description == null) {\n      setDescriptionError(\"Please enter a description\");\n    } else {\n      setDescriptionError(\"\");\n      descriptionOK = true;\n    }\n\n    /* VALIDATE WEIGHT */\n\n    if (weight == \"\" || weight == null) {\n      setWeightError(\"Please enter a weight\");\n    } else if (weight < 0 || weight > 100) {\n      setWeightError(\"Your weight must be between 0 and 100.\");\n    } else if (isNaN(weight)) {\n      setWeightError(\"Please enter a valid number.\");\n    } else if (Number(totalWeight) + Number(weight) - Number(currentCoursework.data.weight) > 100) {\n      setWeightError(\"Current coursework adds up to \" + totalWeight + \"%. This needs to be \" + (100 - totalWeight + currentCoursework.data.weight) + \"% or lower.\")\n    }\n    else {\n      setWeightError(\"\");\n      weightOK = true;\n    }\n\n    /* EITHER TRUE IF ALL ARE VALIDATED OR FALSE */\n\n    if (titleOK == true && descriptionOK == true && weightOK == true) {\n      dispatch(updateCoursework(id, title, description, weight));\n      dispatch(getClassCoursework(class_code));\n    }\n  }\n\n  function handleDeleteCoursework() {\n    if (doubleCheckDelete) {\n      dispatch(deleteCoursework(id));\n    } else {\n      setDoubleCheckDelete(true);\n    }\n  }\n\n  return (\n    <CSSTransition appear={true} in={true} timeout={300} classNames=\"fade\">\n      <div className=\"default-padding\">\n        {courseworkError ? (\n          <Card style={{ marginLeft: \"auto\", marginRight: \"auto\" }}>\n            <Alert variant=\"danger\">Coursework not found!</Alert>\n            <Button className=\"button\">Return to Coursework Page</Button>\n          </Card>\n        ) : deleteSuccess ? (\n          <Card style={{ marginLeft: \"auto\", marginRight: \"auto\" }}>\n            <Alert variant=\"danger\">Coursework successfully deleted</Alert>\n            <Link style={{ padding: \"0\" }} to={\"/coursework/\" + class_code}>\n              <Button className=\"button\">Return to Coursework</Button>\n            </Link>\n          </Card>\n        ) : currentCoursework ? (\n          <Card style={{ marginLeft: \"auto\", marginRight: \"auto\" }}>\n            <Card.Header>Editing Coursework #{id}</Card.Header>\n            <Form className=\"add-coursework-form\">\n              Coursework Title:\n              <Form.Control\n                value={title}\n                disabled={updateSuccess}\n                className={titleError == \"\" ? \"search-bar\" : \"search-bar error\"}\n                onChange={handleTitleChange}\n                type=\"text\"\n              ></Form.Control>\n              <span className=\"error-message\">{titleError}</span> <br />\n              Description:\n              <Form.Control\n                value={description}\n                disabled={updateSuccess}\n                as=\"textarea\"\n                className={\n                  descriptionError == \"\" ? \"search-bar\" : \"search-bar error\"\n                }\n                rows=\"4\"\n                onChange={handleDescriptionChange}\n                type=\"textarea\"\n              ></Form.Control>\n              <span className=\"error-message\">{descriptionError}</span>\n              <br />\n              Percentage of Grade:\n              <InputGroup className=\"mb-2\">\n                <Form.Control\n                  value={weight}\n                  disabled={updateSuccess}\n                  className={\n                    weightError == \"\" ? \"search-bar\" : \"search-bar error\"\n                  }\n                  onChange={handleWeightChange}\n                  type=\"text\"\n                ></Form.Control>\n                <InputGroup.Append>\n                  <InputGroup.Text className=\"percentage-prepend\">\n                    %\n                  </InputGroup.Text>\n                </InputGroup.Append>\n              </InputGroup>\n              <span className=\"error-message\">{weightError}</span> <br />\n              {updateSuccess ? (\n                <div>\n                  <Alert variant=\"success\">Coursework updated</Alert>\n                  <Link\n                    style={{ padding: \"0\" }}\n                    to={\"/coursework/\" + class_code}\n                  >\n                    <Button className=\"button\">Return to Coursework</Button>\n                  </Link>\n                </div>\n              ) : (\n                  <div>\n                    {doubleCheckDelete ? (\n                      <div className=\"delete-cw-button-group\">\n                        <Alert className=\"span-all-cols\" variant=\"warning\">\n                          Are you sure you want to delete? This will delete any\n                        assosciated student marks as well. <br />\n                        </Alert>\n                        <Button\n                          onClick={() => handleDeleteCoursework()}\n                          className=\"confirm-delete-cw\"\n                        >\n                          Yes, delete\n                      </Button>\n                        <Button\n                          onClick={() => setDoubleCheckDelete(false)}\n                          className=\"donot-delete-cw\"\n                        >\n                          No\n                      </Button>\n                      </div>\n                    ) : (\n                        <>\n                          <Button\n                            style={{ marginBottom: \"1rem\" }}\n                            onClick={() => validateInputs()}\n                            className=\"button\"\n                          >\n                            Update Coursework\n                      </Button>\n\n                          <Button\n                            style={{ marginBottom: \"1rem\" }}\n                            onClick={() => handleDeleteCoursework()}\n                            className=\"button\"\n                          >\n                            Delete Coursework\n                      </Button>\n                          <Link\n                            style={{ padding: \"0\" }}\n                            to={\"/coursework/\" + class_code}\n                          >\n                            <Button className=\"button\">Return to Coursework</Button>\n                          </Link>\n                        </>\n                      )}\n                  </div>\n                )}\n            </Form>\n          </Card>\n        ) : null}\n      </div>\n    </CSSTransition>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/ViewStudentsScreens/AdviseesScreen.js",["366","367"],"/**\n * Screen to display a list of students a teacher is an advisor to\n * Action is dispatched and then passed as prop to supertable component.\n */\n\nimport React, { useEffect } from \"react\";\nimport { getAdvisees } from \"../../Actions/studentActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport StudentSuperTable from \"../../Components/Tables/StudentSuperTable\";\nimport { CSSTransition } from \"react-transition-group\";\n\nexport default function AdviseesScreen() {\n  const dispatch = useDispatch();\n  const adviseeList = useSelector((state) => state.advisees);\n  const { loading, details, error } = adviseeList;\n  const staffSignIn = useSelector((state) => state.staffSignIn);\n  const staff_id = staffSignIn.staffInfo.data.staff_id;\n\n  useEffect(() => {\n    if (staff_id !== null) dispatch(getAdvisees(staff_id));\n  }, [dispatch, staff_id]);\n\n\n  return (\n    <>\n      {details ? (\n        <CSSTransition appear={true} in={true} timeout={300} classNames=\"fade\">\n          <StudentSuperTable\n            table_header={\"Advisees\"}\n            data={adviseeList.details.data}\n          />\n        </CSSTransition>\n      ) : null}\n    </>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Attendance/SubClassAttendanceScreen.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Reducers/studentReducers.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Reducers/attendanceReducers.js",[],["368","369"],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/CircumstanceScreen.js",["370","371","372","373","374"],"/**\n * Screen for the circumstance form\n * The form is split into three parts, page1, page2 and page3\n * Status of the form is stored in state and used over the three stages.\n */\n\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport { getStudentCircumstancesResources } from \"../Actions/studentUserActions\";\nimport { submitCircumstanceForm } from \"../Actions/studentUserActions\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\nimport AdviceBox from \"../Components/Utilities/AdviceBox\";\nimport Table from \"react-bootstrap/Table\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport { useParams } from \"react-router\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { SUBMIT_CIRCUMSTANCE_RESET } from \"../Constants/studentUserConstants\";\nimport { CSSTransition } from \"react-transition-group\";\n\nexport default function CircumstanceScreen() {\n  const staffSignIn = useSelector((state) => state.staffSignIn);\n  const studentSignIn = useSelector((state) => state.studentSignIn);\n  const { staffInfo } = staffSignIn;\n  const { studentInfo } = studentSignIn;\n\n  let { id } = useParams();\n\n  const dispatch = useDispatch();\n  const circumstanceList = useSelector((state) => state.resources);\n  const circumstanceSubmit = useSelector((state) => state.submitCircumstance);\n  const { resources } = circumstanceList;\n  const { resources: submit } = circumstanceSubmit;\n  const [selectedCircumstances, setSelectedCircumstances] = useState();\n  const [details, setDetails] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [startDate, setStartDate] = useState(false);\n  const [detailsError, setDetailsError] = useState(false);\n  const [circumstanceError, setCircumstanceError] = useState(false);\n  const [dateError, setDateError] = useState(false);\n  const [displayUpdate, setDisplayUpdate] = useState(false);\n\n\n  useEffect(() => {\n    if (!resources) {\n      dispatch(getStudentCircumstancesResources());\n    }\n\n    return function cleanup() {\n      dispatch({ type: SUBMIT_CIRCUMSTANCE_RESET });\n    };\n  }, [dispatch, resources]);\n\n\n  /**\n   * Validates input for first page\n   */\n  function validatePage1() {\n    if (!selectedCircumstances) {\n      setCircumstanceError(true);\n    }\n    if (!details || details === \"\") {\n      setDetailsError(true);\n    }\n    if (!startDate) {\n      setDateError(true);\n    }\n    if (startDate && selectedCircumstances && details && !details == \"\") {\n      setCircumstanceError(false);\n      setDetailsError(false);\n      setDateError(false);\n      setPage(2);\n    }\n  }\n\n  function handleSubmitClick() {\n    dispatch(\n      submitCircumstanceForm(selectedCircumstances.id, startDate, details, id)\n    );\n  }\n\n  function Page2() {\n    return (\n      <Card page={page}>\n        <div className=\"grid-gap\">\n          <h1>Services</h1>\n          {!selectedCircumstances ? null : (\n            <AdviceBox circumstance={selectedCircumstances} />\n          )}\n          <div className=\"flex\">\n            <Button\n              className=\"profile-button prev-button\"\n              onClick={() => setPage(1)}\n            >\n              Previous\n            </Button>\n            <Button\n              className=\"profile-button next-button\"\n              onClick={() => setPage(3)}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <CSSTransition appear={true} in={true} timeout={300} classNames=\"fade\">\n      <div style = {{display: \"flex\", justifyContent: \"center\"}} className=\"default-padding\">\n        {page === 1 ? (\n          <Card className=\"default-padding\">\n            {!resources ? null : (\n              <>\n                <p>\n                  Select an option that most describes\n                  {staffInfo ? \" the student's\" : \"your\"} circumstances.\n                </p>\n                {!circumstanceError ? null : (\n                  <div className=\"error\"> * Please select an option</div>\n                )}\n                <ToggleButtonGroup\n                  className=\"button-group\"\n                  name=\"type\"\n                  defaultValue={selectedCircumstances}\n                  vertical=\"true\"\n                  type=\"radio\"\n                  onChange={(e) => setSelectedCircumstances(e)}\n                >\n                  {resources.data.map((resource, index) => (\n                    <ToggleButton\n                      value={resource}\n                      variant=\"secondary\"\n                      key={index}\n                    >\n                      {resource.name}\n                    </ToggleButton>\n                  ))}\n                  <ToggleButton value=\"other\" variant=\"secondary\">\n                    Other\n                  </ToggleButton>\n                </ToggleButtonGroup>\n              </>\n            )}\n            <div>\n              <p>Select the date these circumstances began: </p>\n              {!dateError ? null : (\n                <div className=\"error\"> * Please select a date</div>\n              )}\n              <DatePicker\n                selected={startDate}\n                minDate = {moment().subtract(1, \"year\").toDate()}\n                maxDate = {moment().toDate()}\n                onChange={(date) => setStartDate(date)}\n              />\n            </div>\n            <p>\n              Please provide some details\n              {staffInfo ? \".\" : \" (these will be available to your advisor).\"}\n            </p>\n            {!detailsError ? null : (\n              <div className=\"error\">* Please enter some details</div>\n            )}\n            <InputGroup>\n              <Form.Control\n                className={\n                  detailsError == \"\" ? \"search-bar\" : \"search-bar error\"\n                }\n                value={details}\n                onChange={(e) => setDetails(e.target.value)}\n                as=\"textarea\"\n                rows={4}\n              />\n            </InputGroup>\n            <Button\n              className=\"profile-button next-button default-margin-top\"\n              onClick={() => validatePage1()}\n            >\n              Next\n            </Button>\n          </Card>\n        ) : page === 2 ? (\n          <Page2 />\n        ) : (\n          <Card className=\"margin-1rem\">\n            <h1 className=\"default-padding\">Review</h1>\n            <Table bordered responsive>\n              <thead></thead>\n              <tbody>\n                <tr>\n                  <td className=\"table-title-cell\">Type</td>\n                  <td>{selectedCircumstances.name}</td>\n                </tr>\n                <tr>\n                  <td className=\"table-title-cell\">Date Started</td>\n                  <td>{moment(startDate).format(\"MMMM do YYYY\")}</td>\n                </tr>\n                <tr>\n                  <td className=\"table-title-cell\">Details</td>\n                  <td>{details}</td>\n                </tr>\n              </tbody>\n            </Table>\n            <p className=\"default-padding\">\n              Submitting this form will let teachers and staff within{\" \"}\n              {staffInfo ? \"the student's department\" : \"your department\"} know\n              that {staffInfo ? \"the student is \" : \"you are\"} experiencing\n              circumstances that may affect your studies.\n            </p>\n            <p className=\"default-padding\">\n              The details will only be available to{\" \"}\n              {staffInfo ? \"the students\" : \"your\"} personal advisor and the departmental head.\n            </p>\n            {submit ? (\n                <Alert style={{marginBottom: \"0\"}} variant=\"success\">Successfully submitted</Alert>\n            ) : (\n              <>\n                <Button\n                  className=\"profile-button prev-button\"\n                  onClick={() => setPage(2)}\n                >\n                  Previous\n                </Button>\n                <Button\n                  onClick={() => handleSubmitClick()}\n                  className=\"button default-margin-top\"\n                >\n                  Submit\n                </Button>\n              </>\n            )}\n          </Card>\n        )}\n      </div>\n    </CSSTransition>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/ViewStudentsScreens/StudentScreen.js",["375","376","377","378","379","380","381"],"/**\n * A component that displays students by class. This is for teachers viewing students\n * in their class. This offers the ability to filter students by name or matriculation number\n * and offers indicators regarding a students attendance and coursework.\n * It also provides links to students class profiles.\n */\n\nimport React, { useMemo, useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport { listStudentsInClass } from \"../../Actions/classActions\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Alert from \"react-bootstrap/Alert\";\nimport DataTable from \"react-data-table-component\";\nimport { customStyles } from \"../../Components/Tables/tableStyle\";\nimport { CgProfile } from \"react-icons/cg\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { useParams } from \"react-router\";\nimport { STUDENT_CLASS_CLEANUP } from \"../../Constants/classConstants\";\n\nimport StatsIndicator from \"../../Components/Indicators/StatsIndicator\";\nimport Spinner from 'react-bootstrap/Spinner'\n\nexport default function StudentScreen() {\n  let { class_code } = useParams();\n\n  const dispatch = useDispatch();\n  const classList = useSelector((state) => state.studentClassList);\n  const staffSignIn = useSelector((state) => state.staffSignIn);\n\n  const { loading, students, error } = classList;\n\n  const [filterVal, setFilterVal] = useState(\"\");\n  const [inProp, setInProp] = useState(false);\n  const [noStudentsEnrolled, setNoStudentsEnrolled] = useState(false);\n\n  var filtered = [];\n\n  useEffect(() => {\n    dispatch(listStudentsInClass(class_code)).then(\n      setInProp(true)\n    );\n\n    return function cleanup() {\n      dispatch({ type: STUDENT_CLASS_CLEANUP });\n    };\n  }, [dispatch, class_code]);\n\n  const filterBox = useMemo(() => {\n    return (\n      <>\n        <label>Search by Name/Matriculation Number : </label>\n        <FormControl\n          aria-label=\"filter-students-input\"\n          value={filterVal}\n          onChange={(e) => setFilterVal(e.target.value)}\n          className=\"search-bar\"\n          placeholder=\"Search Students\"\n        />\n      </>\n    );\n  });\n\n  /**\n   * convert the class list into readable format for datatable, and to apply set filters\n   */\n\n\n  if (students) {\n    var temprows = [];\n    classList.students.data.students.forEach((element) => {\n      var grade = null;\n      var attendance = null;\n      if (element.attendance_stats.length > 0) {\n        attendance = element.attendance_stats[0].attendance_stat\n      }\n      temprows.push({\n        id: element.matric,\n        matric: element.matric,\n        forename: element.forename,\n        surname: element.surname,\n        attendance: attendance,\n        grade: grade,\n      });\n    });\n    filtered = classList.students.data.students.filter(\n      (item) =>\n        item.matric.includes(filterVal) ||\n        item.forename.toLowerCase().includes(filterVal.toLowerCase()) ||\n        item.surname.toLowerCase().includes(filterVal.toLowerCase())\n    );\n  }\n\n  const columns = useMemo(() => [\n    { name: \"Matric\", selector: \"matric\", sortable: true, hide: \"md\" },\n    {\n      name: \"Forename\",\n      selector: \"forename\",\n      sortable: true,\n    },\n    {\n      name: \"Surname\",\n      selector: \"surname\",\n      sortable: true,\n    },\n    {\n      name: \"Attendance\",\n      selector: row => row.attendance_stats[0].attendance_stat,\n      hide: \"sm\",\n      width: \"130px\",\n      sortable: true,\n      style: {\n        justifyContent: \"center\",\n      },\n      cell: (row) => (\n        <>\n          {row.attendance_stats.length > 0 ? (\n            <StatsIndicator stat={row.attendance_stats[0].attendance_stat} />\n          ) : (\n              \"-\"\n            )}\n        </>\n      ),\n    },\n    {\n      name: \"Coursework\",\n      selector: row => row.weighted_grades.length > 0 ? row.weighted_grades[0].coursework_average : 0,\n      hide: \"sm\",\n      sortable: true,\n      width: \"130px\",\n      style: {\n        justifyContent: \"center\",\n      },\n      sortable: false,\n      cell: (row) => (\n        <>\n          {row.weighted_grades.length > 0 ? (\n            <StatsIndicator stat={row.weighted_grades[0].coursework_average} />\n          ) : (\n              \"-\"\n            )}\n        </>\n      ),\n    },\n    {\n      name: \"\",\n      selector: \"\",\n      sortable: false,\n      cell: (row) => (\n        <div className=\"cell-container\">\n          <Link\n            className=\"profile-button-link\"\n            to={\"/profile/\" + class_code + \"/\" + row.matric}\n          >\n            <Button\n              aria-label={row.matric + \"-profile-button\"}\n              className=\"profile-button\"\n            >\n              <span className=\"sm-label\">Profile</span>\n              <CgProfile />\n            </Button>\n          </Link>\n        </div>\n      ),\n    },\n  ]);\n\n  return (\n    <div>\n      <CSSTransition\n        appear={true}\n        in={students}\n        timeout={300}\n        classNames=\"fade\"\n      >\n        <div>\n          {loading ? <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner> : error ? (\n            <div className=\"center-alert-container\">\n              <Alert className=\"center-alert\" variant=\"danger\">\n                {error}\n              </Alert>\n            </div>\n          ) : noStudentsEnrolled ? (\n            <Alert variant=\"danger\">\n              There are no students currently enrolled in this class.\n            </Alert>\n          ) : students ? (\n            <>\n              <div className=\"table-screen-layout\">\n                <Card className=\"default-padding\">{filterBox}</Card>\n                <Card>\n                  <Card.Header>\n                    {students.data.class_code.toUpperCase() +\n                      \" - \" +\n                      students.data.class_title}\n                  </Card.Header>\n                  <Card.Body>\n                    {filtered.length == 0 ? (\n                      <div style = {{padding: \"1rem\"}}>\n                      <Alert style = {{margin: \"auto\"}} variant=\"danger\">No students found!</Alert>\n                      </div>\n                    ) : (\n                        <DataTable\n                          noHeader={true}\n                          className=\"data-table\"\n                          columns={columns}\n                          data={filtered}\n                          customStyles={customStyles}\n                          noContextMenu=\"true\"\n                          noDataComponent={null}\n                        />\n                      )}\n                  </Card.Body>\n                </Card>\n              </div>\n            </>\n          ) : null}\n        </div>\n      </CSSTransition>\n    </div>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Reducers/staffReducers.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Coursework/ManageCourseworkScreen.js",["382","383"],"/**\n * Screen for displaying all grades for for a given coursework\n */\n\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getCourseworkByID,\n  getCourseworkMarks,\n} from \"../../Actions/courseworkActions\";\nimport { customStyles } from \"../../Components/Tables/tableStyle\";\nimport { Link } from \"react-router-dom\";\n\nimport MarksIndicator from \"../../Components/Indicators/MarksIndicator\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport DataTable from \"react-data-table-component\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport Alert from 'react-bootstrap/Alert';\n\nexport default function ManageCourseworkScreen() {\n  const dispatch = useDispatch();\n  const cwMarks = useSelector((state) => state.courseworkMarks);\n  let { class_code, id } = useParams();\n  var flattened = [];\n\n\n  useEffect(() => {\n    dispatch(getCourseworkMarks(id, class_code));\n  }, [dispatch, id, class_code]);\n\n  if (cwMarks.marks && cwMarks.marks.data !== \"\" && cwMarks.marks.data.coursework_grades.length > 0) {\n    var temp = [];\n    cwMarks.marks.data.coursework_grades.forEach((s) => {\n      temp.push({\n        matric: s.student.matric,\n        forename: s.student.forename,\n        surname: s.student.surname,\n        grade: s.grade,\n      });\n    });\n    flattened = temp;\n  }\n\n  const columns = [\n    { name: \"Matric\", selector: \"matric\", hide: \"sm\", sortable: true },\n    {\n      name: \"Forename\",\n      selector: (row) => row.forename,\n      hide: \"sm\",\n      sortable: true,\n    },\n    {\n      name: \"Surname\",\n      selector: \"surname\",\n      sortable: true,\n    },\n    {\n      name: \"\",\n      cell: (row) => <MarksIndicator row={row} />,\n    },\n    {\n      name: \"\",\n      cell: (row) => (\n        <Link style={{width: \"100%\"}}\n          to={{pathname : \"/coursework/\" + class_code + \"/grades/\" + id + \"/\" + row.matric, state : { name : row.forename + \" \" + row.surname}}}\n        >\n          <Button style={{float:\"right\"}} className=\"profile-button\"><span className=\"hidden-sm\">Edit Grade</span><AiOutlineEdit /></Button>\n        </Link>\n      ),\n    },\n  ];\n\n  return (\n    <CSSTransition appear={true} in={true} timeout={300} classNames=\"fade\">\n      <div className=\"default-padding\">\n        {cwMarks.loading ? null : cwMarks.error ? <Alert variant = \"danger\">{cwMarks.error}</Alert> : (\n          <Card style = {{marginLeft: \"auto\", marginRight: \"auto\"}}>\n            <Card.Header>\n              {class_code.toUpperCase()} - {cwMarks.marks.data.title}\n            </Card.Header>\n            <Card.Body>\n\n              {cwMarks.marks.data == \"\" ? \n              <Alert style={{margin: \"1rem\"}} variant = \"warning\">There are no students enrolled in this class!</Alert>\n              : (\n                <div>\n                  <Link className = \"hide-mobile\" style={{padding: \"0\"}}\n                    to={\"/coursework/\" + class_code + \"/grades/\" + id + \"/csv\"}\n                  >\n                    <Button style = {{padding: \"1rem\", marginTop: \"1rem\", marginBottom: \"1rem\"}} className=\"button\">Upload via CSV</Button>\n                  </Link>\n                  \n                  <DataTable\n                    noHeader={true}\n                    className=\"data-table\"\n                    columns={columns}\n                    data={flattened}\n                    customStyles={customStyles}\n                    noContextMenu=\"true\"\n                    noDataComponent={null}\n                  />\n                </div>\n              )}\n            </Card.Body>\n          </Card>\n        )}\n      </div>\n    </CSSTransition>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Attendance/SubAttendanceScreen.js",["384"],"/**\n * Screen for taking attendance for smaller classes\n */\n\nimport React, { useEffect } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { useParams } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport { useState } from \"react\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\nimport ManualAttendanceTable from \"../../Components/Tables/ManualAttendanceTable\";\nimport { getSubClassesRegister, addSub } from \"../../Actions/lectureActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FaUndo } from \"react-icons/fa\";\nimport {\n  ADD_SUB_RESET,\n  ADD_LECTURE_RESET,\n  LOG_ATTENDANCE_RESET,\n} from \"../../Constants/lectureConstants\";\nimport { CSSTransition } from \"react-transition-group\";\n\nexport default function SubClassAttendanceScreen(props) {\n  let { class_code, group_id } = useParams();\n  const dispatch = useDispatch();\n\n  const lecture = useSelector((state) => state.addSubClass);\n  const { classes: lectureDone } = lecture;\n  const sub = useSelector((state) => state.subClassesRegister);\n  const attendance = useSelector((state) => state.logLectureAttendance);\n  const { success: attendanceSuccess } = attendance;\n\n  const [startDate, setStartDate] = useState(false);\n  const [startTime, setStartTime] = useState(false);\n  const [dateValidated, setDateValidated] = useState(null);\n  const [timeValidated, setTimeValidated] = useState(null);\n\n\n  useEffect(() => {\n    if (!sub.students) {\n      dispatch(getSubClassesRegister(group_id));\n    }\n\n    if (attendanceSuccess || lectureDone) {\n      setStartDate(false);\n      setStartTime(false);\n      setDateValidated(null);\n      setTimeValidated(null);\n      dispatch({ type: ADD_SUB_RESET });\n      dispatch({ type: LOG_ATTENDANCE_RESET });\n      dispatch(getSubClassesRegister(group_id));\n    } else if (timeValidated && dateValidated) {\n      dispatch(\n        addSub(\n          class_code,\n          startDate.toISOString().split(\"T\")[0],\n          startTime.toISOString().split(\"T\")[1].substring(0, 8),\n          group_id\n        )\n      );\n    }\n\n    return function cleanup() {\n      dispatch({ type: ADD_LECTURE_RESET });\n      dispatch({ type: LOG_ATTENDANCE_RESET });\n    };\n  }, [timeValidated, dateValidated, dispatch, class_code, group_id]);\n\n  function handleAddLectureClick() {\n    if (!startDate) {\n      setDateValidated(false);\n    } else {\n      setDateValidated(true);\n    }\n\n    if (!startTime) {\n      setTimeValidated(false);\n    } else {\n      setTimeValidated(true);\n    }\n  }\n\n  function handleUndoClick() {\n    setDateValidated(false);\n    setTimeValidated(false);\n    dispatch({ type: LOG_ATTENDANCE_RESET });\n    dispatch({ type: ADD_LECTURE_RESET });\n  }\n\n  return (\n    <CSSTransition appear={true} in={true} timeout={300} classNames=\"fade\">\n      <div\n        style={{ flexDirection: \"column\" }}\n        className=\"page-margin default-padding\"\n      >\n        <Card style={{ margin: \"auto\" }}>\n          <Card.Header>\n            {class_code.toUpperCase()}{\" \"}\n            {props.location.state.type\n              ? \" - \" + props.location.state.type\n              : null}{\" \"}\n            {props.location.state.group_name\n              ? \" - \" + props.location.state.group_name\n              : null}\n          </Card.Header>\n          <Card.Body className=\"manual-attendance-card\">\n            <div className=\"time-date-select-wrapper\">\n              <div>\n                Date: <br />\n                <DatePicker\n                  chooseDayAriaLabelPrefix=\"lecture-date\"\n                  ariaLabelledBy=\"lecture-date\"\n                  selected={startDate}\n                  onChange={(date) => setStartDate(date)}\n                  disabled={lectureDone}\n                />\n                {dateValidated === false ? \"Please enter a date\" : \" \"}\n              </div>\n\n              <div>\n                Time: <br />\n                <DatePicker\n                  ariaLabelClose=\"lecture-time\"\n                  selected={startTime}\n                  onChange={(time) => setStartTime(time)}\n                  showTimeSelect\n                  showTimeSelectOnly\n                  timeIntervals={60}\n                  timeCaption=\"Time\"\n                  dateFormat=\"h aa\"\n                  disabled={lectureDone}\n                />\n                {timeValidated === false ? \"Please enter a time\" : \" \"}\n              </div>\n\n              {/* EITHER CREATE LECTURE OR DISPLAY ALERT THAT LECTURE HAS BEEN (UN)SUCCESSFULLY CREATED */}\n              {lectureDone ? (\n                <div className=\"flex lecture-alert-container\">\n                  <Alert\n                    style={{\n                      fontSize: \"3rem\",\n                      height: \"100%\",\n                      marginBottom: \"0\",\n                    }}\n                    className=\"lecture-alert\"\n                    variant=\"success\"\n                  >\n                    Class created!\n                  </Alert>\n                  {attendanceSuccess ? null : (\n                    <Button\n                      onClick={() => handleUndoClick()}\n                      className=\"dark-button margin-left-auto\"\n                    >\n                      <FaUndo />\n                    </Button>\n                  )}\n                </div>\n              ) : (\n                <Button\n                  aria-label=\"submit-lecture-button\"\n                  onClick={() => handleAddLectureClick()}\n                  className=\"button\"\n                >\n                  Create Class\n                </Button>\n              )}\n            </div>\n          </Card.Body>\n        </Card>\n\n        {attendanceSuccess ? (\n          <CSSTransition\n            appear={true}\n            in={true}\n            timeout={300}\n            classNames=\"fade\"\n          >\n            <Card\n              style={{\n                marginLeft: \"auto\",\n                marginRight: \"auto\",\n                marginTop: \"1rem\",\n                padding: \"1rem\",\n              }}\n            >\n              <Alert\n                style={{\n                  marginBottom: \"0\",\n                  textAlign: \"center\",\n                  fontSize: \"x-large\",\n                }}\n                variant=\"info\"\n              >\n                Attendance successfully recorded for this class!\n              </Alert>\n            </Card>\n          </CSSTransition>\n        ) : !lectureDone ? null : (\n          <CSSTransition\n            appear={true}\n            in={true}\n            timeout={300}\n            classNames=\"fade\"\n          >\n            <Card\n              style={{\n                marginLeft: \"auto\",\n                marginRight: \"auto\",\n                marginTop: \"1rem\",\n                padding: \"1rem\",\n              }}\n            >\n              <ManualAttendanceTable\n                group_id={group_id}\n                session_id={lectureDone.data.id}\n                students={sub.students.data}\n              />\n            </Card>\n          </CSSTransition>\n        )}\n      </div>\n    </CSSTransition>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Reducers/courseworkReducers.js",["385"],"const {\n  BATCH_UPLOAD_MARKS_FAIL,\n  BATCH_UPLOAD_MARKS_SUCCESS,\n  BATCH_UPLOAD_MARKS_REQUEST,\n  BATCH_UPLOAD_MARKS_CLEANUP,\n  UPDATE_COURSEWORK_MARKS_FAIL,\n  UPDATE_COURSEWORK_MARKS_SUCCESS,\n  UPDATE_COURSEWORK_MARKS_REQUEST,\n  UPDATE_COURSEWORK_MARKS_RESET,\n  GET_STUDENT_COURSEWORK_FAIL,\n  GET_STUDENT_COURSEWORK_RESET,\n  GET_STUDENT_COURSEWORK_SUCCESS,\n  GET_STUDENT_COURSEWORK_REQUEST,\n  GET_COURSEWORK_MARKS_FAIL,\n  GET_COURSEWORK_MARKS_REQUEST,\n  GET_COURSEWORK_MARKS_SUCCESS,\n  GET_COURSEWORK_BY_ID_RESET,\n  DELETE_COURSEWORK_FAIL,\n  DELETE_COURSEWORK_REQUEST,\n  DELETE_COURSEWORK_SUCCESS,\n  DELETE_COURSEWORK_RESET,\n  UPDATE_COURSEWORK_FAIL,\n  UPDATE_COURSEWORK_REQUEST,\n  UPDATE_COURSEWORK_SUCCESS,\n  UPDATE_COURSEWORK_RESET,\n  GET_COURSEWORK_BY_ID_FAIL,\n  GET_COURSEWORK_BY_ID_REQUEST,\n  GET_COURSEWORK_BY_ID_SUCCESS,\n  ADD_COURSEWORK_REQUEST,\n  ADD_COURSEWORK_SUCCESS,\n  ADD_COURSEWORK_FAIL,\n  ADD_COURSEWORK_RESET, \n  GET_CLASS_COURSEWORK_FAIL,\n  GET_CLASS_COURSEWORK_SUCCESS,\n  GET_CLASS_COURSEWORK_REQUEST,\n  GET_CLASS_COURSEWORK_RESET,\n  EDIT_CW_RESET\n} = require(\"../Constants/courseworkConstants\");\n\nexport const batchUploadCourseworkReducer = (\n  state = { },\n  action\n) => {\n  switch (action.type) {\n    case BATCH_UPLOAD_MARKS_REQUEST:\n      return { loading: true };\n    case BATCH_UPLOAD_MARKS_SUCCESS:\n      return { loading: false, marks: action.payload };\n    case BATCH_UPLOAD_MARKS_FAIL:\n      return { loading: false, error: action.payload };\n    case BATCH_UPLOAD_MARKS_CLEANUP:\n      return {}\n    default:\n      return state;\n  }\n};\n\nexport const getStudentCourseworkReducer = (\n  state = { loading: true },\n  action\n) => {\n  switch (action.type) {\n    case GET_STUDENT_COURSEWORK_REQUEST:\n      return { loading: true };\n    case GET_STUDENT_COURSEWORK_SUCCESS:\n      return { loading: false, marks: action.payload };\n    case GET_STUDENT_COURSEWORK_FAIL:\n      return { loading: false, error: action.payload };\n    case GET_STUDENT_COURSEWORK_RESET:\n      return {};\n    default:\n      return state;\n  }\n};\n\nexport const updateCourseworkMarksReducer = (\n  state = { loading: true },\n  action\n) => {\n  switch (action.type) {\n    case UPDATE_COURSEWORK_MARKS_REQUEST:\n      return { loading: true };\n    case UPDATE_COURSEWORK_MARKS_SUCCESS:\n      return { loading: false, success: action.payload };\n    case UPDATE_COURSEWORK_MARKS_FAIL:\n      return { loading: false, error: action.payload };\n    case UPDATE_COURSEWORK_MARKS_RESET:\n      return {};\n    default:\n      return state;\n  }\n};\n\nexport const getCourseworkMarksReducer = (\n  state = { loading: true },\n  action\n) => {\n  switch (action.type) {\n    case GET_COURSEWORK_MARKS_REQUEST:\n      return { loading: true };\n    case GET_COURSEWORK_MARKS_SUCCESS:\n      return { loading: false, marks: action.payload };\n    case GET_COURSEWORK_MARKS_FAIL:\n      return { loading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport const addCourseworkReducer = (state = { loading: true }, action) => {\n  switch (action.type) {\n    case ADD_COURSEWORK_REQUEST:\n      return { loading: true };\n    case ADD_COURSEWORK_SUCCESS:\n      return { loading: false, session: action.payload };\n    case ADD_COURSEWORK_FAIL:\n      return { loading: false, error: action.payload };\n    case ADD_COURSEWORK_RESET:\n      return {}\n    default:\n      return state;\n  }\n};\n\n/** this reducer is different, it adds an extra attribute by adding up the weights of the returned\n * results from the getClassCourseworkReducer. Used for editting and adding coursework\n */\nexport const getClassCourseworkReducer = (\n  state = { loading: true, classes: [] },\n  action\n) => {\n  switch (action.type) {\n    case GET_CLASS_COURSEWORK_REQUEST:\n      return { loading: true };\n    case GET_CLASS_COURSEWORK_SUCCESS:\n      var weightCount = 0;\n      if (action.payload && action.payload.data && action.payload.data.length > 0) {\n        for (var i = 0; i < action.payload.data.length; i++ ) {\n          weightCount = weightCount + action.payload.data[i].weight;\n        }\n      }\n      return { loading: false, classes: action.payload, totalWeight : weightCount };\n    case GET_CLASS_COURSEWORK_FAIL:\n      return { loading: false, error: action.payload };\n    case GET_CLASS_COURSEWORK_RESET:\n      return {};\n    default:\n      return state;\n  }\n};\n\nexport const getCourseworkByIDReducer = (state = {}, action) => {\n  switch (action.type) {\n    case GET_COURSEWORK_BY_ID_REQUEST:\n      return { loading: true };\n    case GET_COURSEWORK_BY_ID_SUCCESS:\n      return { loading: false, classes: action.payload };\n    case GET_COURSEWORK_BY_ID_FAIL:\n      return { loading: false, error: action.payload };\n    case GET_COURSEWORK_BY_ID_RESET:\n        return {}\n    default:\n      return state;\n  }\n};\n\nexport const updateCourseworkReducer = (state = {}, action) => {\n  switch (action.type) {\n    case UPDATE_COURSEWORK_REQUEST:\n      return { loading: true };\n    case UPDATE_COURSEWORK_SUCCESS:\n      return { loading: false, success: true };\n    case UPDATE_COURSEWORK_FAIL:\n      return { loading: false, error: action.payload };\n    case UPDATE_COURSEWORK_RESET:\n      return {};\n    default:\n      return state;\n  }\n};\n\nexport const deleteCourseworkReducer = (state = {}, action) => {\n  switch (action.type) {\n    case DELETE_COURSEWORK_REQUEST:\n      return { loading: true };\n    case DELETE_COURSEWORK_SUCCESS:\n      return { loading: false, success: true };\n    case DELETE_COURSEWORK_FAIL:\n      return { loading: false, error: action.payload };\n    case DELETE_COURSEWORK_RESET:\n      return {};\n    default:\n      return state;\n  }\n};\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Reducers/studentUserReducer.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Coursework/EditCourseworkGradeScreen.js",["386","387","388","389"],"import React, { useEffect, useState } from \"react\";\nimport {\n  getStudentCoursework,\n  updateCourseworkMarks,\n} from \"../../Actions/courseworkActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {Link} from 'react-router-dom'\nimport { GET_STUDENT_COURSEWORK_RESET, UPDATE_COURSEWORK_MARKS_RESET } from \"../../Constants/courseworkConstants\";\n\n\n\nexport default function EditCourseworkGradeScreen(props) {\n  let { class_code, coursework_id, student_id } = useParams();\n  const dispatch = useDispatch();\n  const cw = useSelector((state) => state.studentCoursework);\n  const update = useSelector((state) => state.updateCourseworkMarks);\n\n\n  const [feedback, setFeedback] = useState(\"\");\n  const [grade, setGrade] = useState(\"\");\n  const [gradeError, setGradeError] = useState(false);\n  const [feedbackError, setFeedbackError] = useState(false);\n\n\n\n  useEffect(() => {\n    //neccessary so that if the user updates, navigates back and returns to page, the values are updated\n    if (!cw.marks || update.success || cw.marks.data.matric !== student_id) {\n      //destroys any state in the updatevalue variable in store\n      dispatch({type : UPDATE_COURSEWORK_MARKS_RESET})\n      dispatch(getStudentCoursework(coursework_id, student_id, class_code));\n    } else {\n      //adds data as default values for input\n      if (cw.marks.data.feedback != null) {\n        setFeedback(cw.marks.data.feedback);\n      }\n      if (cw.marks.data.grade != null) {\n        setGrade(cw.marks.data.grade);\n      }\n    }\n\n  }, [dispatch, cw.marks, coursework_id, student_id]);\n\n  function handleFeedbackChange(e) {\n    setFeedback(e.target.value);\n  }\n\n  function handleGradeChange(e) {\n    setGrade(e.target.value);\n  }\n\n  /**\n   * handles user input.\n   * checks that values are a valid type, and so that\n   * the percentage does not exceed 100%\n   */\n\n  function handleUpdateSubmit() {\n    if (grade < 0 || grade > 100 || (isNaN(grade)) || grade == \"\" || grade == null ) {\n      setGradeError(\"Please enter a valid grade of 0-100\")\n    } else if (feedback == \"\" || feedback == null) {\n        setFeedbackError(\"Please enter some feedback for the student.\")\n      }\n    \n    else {\n      dispatch(updateCourseworkMarks(coursework_id, student_id, grade, feedback));\n      setFeedbackError(false)\n      setGradeError(false)\n    }\n  }\n\n  return (\n    <CSSTransition appear={true} in={true} timeout={300} classNames=\"fade\">\n      <div className=\"default-padding\">\n        <Card style={{ margin: \"auto\" }}>\n          <Card.Header>Editing Coursework - Student {student_id} {props.location.state.name ? \" - \" + props.location.state.name : null } </Card.Header>\n          <Form className=\"add-coursework-form\">\n            Grade:\n            <InputGroup>\n              <Form.Control\n                value={grade}\n                className=\"search-bar\"\n                onChange={handleGradeChange}\n                type=\"text\"\n              ></Form.Control>\n              <InputGroup.Append>\n                <InputGroup.Text className=\"percentage-prepend\">\n                  %\n                </InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n            <span className=\"error-message\">{gradeError}</span> <br />\n            Feedback:\n            <Form.Control\n              value={feedback}\n              as=\"textarea\"\n              className=\"search-bar\"\n              rows=\"4\"\n              onChange={handleFeedbackChange}\n              type=\"textarea\"\n            ></Form.Control>\n            <span className=\"error-message\">{feedbackError}</span> <br />\n            {!update.success ? (\n              <Button className=\"button\" onClick={() => handleUpdateSubmit()}>\n                {\" \"}\n                Update{\" \"}\n              </Button>\n            ) : (\n              <div>\n                <Alert variant=\"success\">Successfully updated</Alert>\n                <Link style={{padding: \"0\"}} to={'/coursework/' + class_code + '/grades/' + coursework_id}>\n                <Button className=\"button\">Return to Grades</Button>\n                </Link>\n              </div>\n            )}\n          </Form>\n        </Card>\n      </div>\n    </CSSTransition>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Reducers/classReducers.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Profiles/SuperProfileScreen.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Navigation/LoggedOutNav.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Navigation/StudentNavbar.js",["390"],"/**\n * navigation for logged in student.\n */\n\nimport React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { GrClose } from \"react-icons/gr\";\nimport { GiHamburgerMenu } from \"react-icons/gi\";\nimport StudentNotificationBell from \"../Indicators/StudentNotificationBell\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { AiOutlineLogout } from \"react-icons/ai\"\nimport { AiOutlineHome } from \"react-icons/ai\";\nimport { RiFilePaperLine } from \"react-icons/ri\"\nimport { FaRegHeart } from \"react-icons/fa\"\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { studentSignout } from \"../../Actions/studentUserActions\";\n\nexport default function StudentNavbar() {\n  const dispatch = useDispatch();\n  const [drawerToggle, setDrawerToggle] = useState(false);\n  const studentSignIn = useSelector((state) => state.studentSignIn);\n\n  function handleSignOutClick() {\n    dispatch(studentSignout());\n  }\n\n  function Drawer() {\n    return (\n      <nav>\n        <Link to=\"/\">\n          <div className=\"menu-item\">\n            <div className=\"icon\">\n              <AiOutlineHome />{\" \"}\n            </div>\n            Profile\n          </div>\n        </Link>\n        <Link\n          to={\"/student/circumstances/\" + studentSignIn.studentInfo.data.matric}\n        >\n          <div className=\"menu-item\">\n            <div className=\"icon\">\n              <RiFilePaperLine />{\" \"}\n            </div>\n            Submit Circumstances Form\n          </div>\n        </Link>\n        <Link to={\"/student/advice/\" + studentSignIn.studentInfo.data.matric} >\n          <div className=\"menu-item\">\n            <div className=\"icon\">\n              <FaRegHeart />{\" \"}\n            </div>\n            Your Advice\n          </div>\n        </Link>\n      </nav>\n    );\n  }\n\n  return (\n    <div className=\"nav-wrapper\">\n      <div className=\"header-style\">\n        <div className=\"flex-vertical-align \">\n          <Button\n            className=\"header-button\"\n            onClick={() => setDrawerToggle(!drawerToggle)}\n          >\n            {drawerToggle ? (\n              <GrClose className=\"flex-vertical-align header-icon-border \" />\n            ) : (\n              <GiHamburgerMenu className=\"flex-vertical-align header-icon-border\" />\n            )}\n          </Button>\n\n          <Link className=\"logo header-padding\" to=\"/\">\n            StudentCheck\n          </Link>\n        </div>\n\n        <div className=\"flex-vertical-align margin-left\">\n        <Link to=\"/student/notifications\">\n          <Button className=\"header-button\">\n            <StudentNotificationBell className=\"flex-vertical-align\" />{\" \"}\n            </Button> \n            </Link>\n            <Link to = \"/\">\n            <Button style={{fontSize : \"2rem\"}} onClick={() => handleSignOutClick()} className=\"header-button\" aria-label=\"navigation-button\">\n              Log Out <AiOutlineLogout className=\"flex-vertical-align\" />\n            </Button>\n            </Link>\n        </div>\n      </div>\n      <div className={drawerToggle ? \"drawer active\" : \"drawer\"}>\n        <Drawer />\n      </div>\n    </div>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Coursework/CourseworkCSVScreen.js",["391","392","393","394"],"/**\n * Screen for handling uploading attendance via CSV\n * Validates user input before being dispatched.\n */\n\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Papa from \"papaparse\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { batchUploadCoursework } from \"../../Actions/courseworkActions\";\nimport { listStudentsInClass } from \"../../Actions/classActions\";\n\nimport { useParams } from \"react-router\";\nimport { BATCH_UPLOAD_MARKS_CLEANUP } from \"../../Constants/courseworkConstants\";\nimport { Link } from 'react-router-dom'\n\nexport default function CourseworkCSVScreen() {\n  let { class_code, id } = useParams();\n  const dispatch = useDispatch();\n\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [enrolledStudents, setEnrolledStudents] = useState([]);\n  const [studentsError, setStudentsError] = useState(false);\n\n  const uploadMarks = useSelector((state) => state.batchUploadMarks);\n  const { loading, marks, error } = uploadMarks\n  const enrolled = useSelector((state) => state.studentClassList);\n  const [fileTypeError, setFileTypeError] = useState(false);\n  const [headerError, setHeaderError] = useState(false);\n\n  useEffect(() => {\n    if (\n      !enrolled.students ||\n      enrolled.students.data.class_code.toLowerCase() !==\n      class_code.toLowerCase()\n    ) {\n      dispatch(listStudentsInClass(class_code));\n    } else {\n      let temp = enrolled.students.data.students.map((a) => a.matric);\n      setEnrolledStudents(temp);\n    }\n\n    return function cleanup() {\n      dispatch({ type: BATCH_UPLOAD_MARKS_CLEANUP })\n    }\n  }, [dispatch, enrolled.students, class_code]);\n\n\n  function handleFileSelected(e) {\n    setHeaderError(false)\n    setSelectedFile(e.target.files[0]);\n  }\n\n  function handleUploadClick() {\n    if (selectedFile !== null) {\n      if (selectedFile.name.split(\".\")[1] != \"csv\") {\n        setFileTypeError(true)\n      } else {\n        Papa.parse(selectedFile, {\n          skipEmptyLines: true,\n          complete: parseData,\n          header: true.valueOf,\n        });\n      }\n    }\n  }\n\n  function parseData(result) {\n    //check the headers needed are available\n    if (!result.meta.fields.includes(\"Matric\") || !result.meta.fields.includes(\"Grade\") || !result.meta.fields.includes(\"Feedback\")) {\n      setHeaderError(true)\n    } else {\n      var students = [];\n      var studentsErrorTemp = [];\n\n      result.data.forEach((student) => {\n        // Check that the Student ID field is not null. Feedback and Grade are nullable.\n\n        if (\n          student[\"Matric\"] !== \"\" &&\n          student[\"Matric\"] !== null &&\n          student[\"Matric\"] &&\n          enrolledStudents.includes(student[\"Matric\"])\n        ) {\n          students.push({\n            coursework_id: id,\n            matric: student[\"Matric\"],\n            grade: student[\"Grade\"],\n            feedback: student[\"Feedback\"],\n          });\n        } else if (!enrolledStudents.includes(student[\"Matric\"])) {\n          studentsErrorTemp.push(student[\"Matric\"]);\n        }\n      });\n      if (studentsErrorTemp.length > 0) {\n      setStudentsError(studentsErrorTemp); }\n      dispatch(batchUploadCoursework(students));\n    }\n  }\n\n  return (\n    <div>\n      <Card style={{ marginLeft: \"auto\", marginRight: \"auto\", marginTop: \"1rem\" }}>\n        <Card.Header>{class_code.toUpperCase()} - #{id}</Card.Header>\n        {marks ? (\n          <div style={{ padding: \"1rem\" }}>\n            <Alert variant=\"success\">Coursework grades have been uploaded!</Alert>\n            {!studentsError || studentsError.length == 0 ? null : (\n              <>\n                <Alert variant=\"warning\">\n                  There were some unrecognised entries in your file that could not\n                be entered. <br />\n                  <br />\n                  {studentsError.map((element) =>\n                    <p>{element}</p>\n                  )}\n                </Alert>\n                <Link to={'/coursework/' + class_code + '/grades/' + id} >\n                  <Button className=\"button\">Return to Coursework</Button>\n                </Link>\n              </>\n            )}\n          </div>\n        ) : (\n            <Form>\n              <Alert variant=\"info\">\n                You can upload multiple students feedback for this coursework\n              here. <br /> <br /> Please ensure that your file contains the\n              fields \"Matric\", \"Grade\" and \"Feedback\" with appropriate values\n              for a successful upload.\n            </Alert>\n              {!fileTypeError ? null :\n                <Alert variant=\"danger\" style={{ textAlign: \"center\" }}>\n                  Your file must be type CSV!\n      </Alert>\n              }\n              {!headerError ? null :\n                <Alert variant=\"danger\" style={{ textAlign: \"center\" }}>\n                  Please check your headers. Your file must contain the headers \"Matric\", \"Grade\" and \"Feedback\"!\n      </Alert>\n              }\n              <Form.Group>\n                <Form.File\n                  accept=\".csv\"\n                  style={{ padding: \"2rem\" }}\n                  onChange={handleFileSelected}\n                  label=\"Please upload the .csv file here\"\n                />\n              </Form.Group>\n              <Button onClick={handleUploadClick} className=\"button\">\n                Upload Feedback\n            </Button>\n            </Form>\n          )}\n      </Card>\n    </div>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Utilities/StaffRoute.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Reducers/lectureReducers.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Profiles/StudentClassProfile.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Navigation/StaffNavbar.js",["395","396","397","398","399"],"/**\n * navigation for logged in staff member\n */\n\nimport { useSelector } from \"react-redux\";\nimport { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"react-router-dom\";\nimport { GiHamburgerMenu } from \"react-icons/gi\";\nimport NotificationBell from \"../Indicators/NotificationBell\";\nimport UserProfileIcon from \"../Indicators/UserProfileIcon\";\nimport { GrClose } from \"react-icons/gr\";\nimport { AiFillCaretDown, AiFillCaretUp } from \"react-icons/ai\";\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getStaffClasses, staffSignout } from \"../../Actions/staffUserActions\";\nimport { AiOutlineHome, AiOutlineLogout } from \"react-icons/ai\";\nimport { BsBook } from \"react-icons/bs\";\nimport { FiUsers } from \"react-icons/fi\";\nimport { FaChalkboardTeacher } from \"react-icons/fa\";\n\nexport default function Navbar() {\n  const dispatch = useDispatch();\n  const staffSignIn = useSelector((state) => state.staffSignIn);\n  const staffLoggedIn = staffSignIn.staffInfo;\n\n  const [drawerToggle, setDrawerToggle] = useState(false);\n\n  function setDrawerToggleClick() {\n    setDrawerToggle(!drawerToggle);\n  }\n\n  const signOutClick = () => dispatch(staffSignout());\n\n  /**\n   * DRAWER COMPONENT\n   * */\n\n  function Drawer() {\n    const staffSignIn = useSelector((state) => state.staffSignIn);\n    const staffLoggedIn = staffSignIn.staffInfo.data;\n    const classDispatch = useDispatch();\n    const [classes, setClasses] = useState(false);\n    const [departments, setDepartments] = useState(false);\n\n    useEffect(() => {\n      if (staffLoggedIn.classes.length > 0) {\n        setClasses(staffLoggedIn.classes);\n      }\n\n      if (staffLoggedIn.departments.length > 0) {\n        setDepartments(staffLoggedIn.departments);\n      }\n    }, [staffSignIn]);\n\n    const signOutClick = () => classDispatch(staffSignout());\n\n    return staffLoggedIn == null ? null : (\n      <nav>\n        <Link to=\"/\">\n          <Button onClick={() => setDrawerToggleClick()} className=\"menu-item\">\n            <div className=\"icon\">\n              <AiOutlineHome />{\" \"}\n            </div>\n            Home\n          </Button>\n        </Link>\n\n        {/* SUBMENU FOR TEACHERS */}\n\n        {!classes ? null : (\n          <div>\n            <div className=\"divider\">CLASSES</div>\n            {classes.map((item, key) => {\n              return <StaffSubMenu item={item} key={key} />;\n            })}\n          </div>\n        )}\n\n        {/* SUBMENU FOR DEPARTMENT HEAD */}\n\n        {!departments ? null : (\n          <div>\n            <div className=\"divider\">DEPARTMENT</div>\n            {departments.map((item, key) => {\n              return (\n                <Link\n                  key={key}\n                  to={\"/department/\" + item.dept_id.toLowerCase()}\n                >\n                  <Button onClick={() => setDrawerToggleClick()} className=\"menu-item\">\n                    <div className=\"icon\">\n                      <FiUsers />{\" \"}\n                    </div>\n                    {item.dept_title}\n                  </Button>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n\n        {/*SUBMENU FOR ADVISORS */}\n\n        {!staffLoggedIn.advisor ? null : (\n          <div>\n            <div className=\"divider\">ADVISEES</div>\n            <Link to=\"/advisees\">\n              <Button onClick={() => setDrawerToggleClick()}  className=\"menu-item\">\n                <div className=\"icon\">\n                  <FiUsers />{\" \"}\n                </div>\n                Students\n              </Button>\n            </Link>\n          </div>\n        )}\n\n        {/*SUBMENU FOR YEAR HEAD */}\n\n        <div className=\"divider\"></div>\n        <Button\n          className=\"log-out-nav menu-item\"\n          onClick={() => signOutClick()}\n        >\n          <div className=\"icon\">\n            <AiOutlineLogout />\n          </div>\n          Log out\n        </Button>\n      </nav>\n    );\n  }\n\n  /**\n   * COMPONENT FOR THE SUB MENUS\n   * @param {*} props\n   */\n\n  function StaffSubMenu(props) {\n    const item = props.item;\n\n    const [showSubMenu, setShowMenu] = useState(false);\n\n    const toggleMenu = () => setShowMenu(!showSubMenu);\n\n    return (\n      <div className=\"divide\">\n        <Button\n          className=\"menu-item\"\n          aria-label={item.class_code + \"-class-menu\"}\n          onClick={() => toggleMenu()}\n        >\n          <div className=\"icon\">\n            {\" \"}\n            {showSubMenu ? <AiFillCaretUp /> : <AiFillCaretDown />}{\" \"}\n          </div>{\" \"}\n          {item.class_code} - {item.class_title}{\" \"}\n        </Button>\n        {showSubMenu ? (\n          <div>\n            <Link to={\"/students/\" + item.class_code.toLowerCase()}>\n              <div\n                onClick={() => setDrawerToggleClick()}\n                className=\"sub-menu-item\"\n              >\n                Students\n              </div>\n            </Link>\n            <Link to={\"/coursework/\" + item.class_code.toLowerCase()}>\n              <div\n                onClick={() => setDrawerToggleClick()}\n                className=\"sub-menu-item\"\n              >\n                Manage Coursework\n              </div>\n            </Link>\n            <Link to={\"/attendance/\" + item.class_code.toLowerCase()}>\n              <div\n                onClick={() => setDrawerToggleClick()}\n                className=\"sub-menu-item\"\n              >\n                Lecture Attendance\n              </div>\n            </Link>\n            {item.subclass_groups.length > 0 ? (\n              <Link to={\"/attendance/subclasses/\" + item.class_code.toLowerCase()}>\n                <div\n                  onClick={() => setDrawerToggleClick()}\n                  className=\"sub-menu-item\"\n                >\n                  Tutorials and Lab Attendance\n                </div>\n              </Link>\n            ) : null}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"nav-wrapper\">\n      <div className=\"header-style\">\n        <div className=\"flex-vertical-align \">\n          <Button\n            aria-label=\"navigation-button\"\n            className=\"header-button\"\n            onClick={() => setDrawerToggleClick()}\n          >\n            {drawerToggle ? (\n              <GrClose className=\"flex-vertical-align header-icon-border \" />\n            ) : (\n                <GiHamburgerMenu className=\"flex-vertical-align header-icon-border\" />\n              )}\n          </Button>\n\n          <Link className=\"logo header-padding\" to=\"/\">\n            StudentCheck\n          </Link>\n        </div>\n\n        {staffLoggedIn ? (\n          <div className=\"flex-vertical-align margin-left\">\n            <Link to=\"/staff/notifications\">\n              <Button className=\"header-button\">\n                <NotificationBell className=\"flex-vertical-align\" />{\" \"}\n              </Button>\n            </Link>\n            <Button style={{fontSize : \"2rem\"}} onClick={() => signOutClick()} className=\"header-button\" aria-label=\"navigation-button\">\n              Log Out <AiOutlineLogout className=\"flex-vertical-align\" />\n            </Button>\n          </div>\n        ) : (\n            <Link to=\"/login\">Sign In</Link>\n          )}\n      </div>\n      <div className={drawerToggle ? \"drawer active\" : \"drawer\"}>\n        <Drawer />\n      </div>\n    </div>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Utilities/AdviceBox.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Actions/studentActions.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Actions/studentUserActions.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Actions/staffUserActions.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/LoginForms/StaffLoginForm.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Actions/classActions.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/LoginForms/StudentLoginForm.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Actions/courseworkActions.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Feedback/NoticationCard.js",["400","401"],"/**\n * Card for displaying notification for a class.\n * Used for teachers and students. Displays the concerning statistics\n * within the card.\n */\n\nimport React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {Link} from \"react-router-dom\";\n\nexport default function NotificationCard(props) {\n  const data = props.data;\n  var stat = 0;\n  if (props.type == \"attendance\") {\n    stat = data.attendance_stat\n  } else if (props.type == \"average grade\") {\n    stat = data.coursework_average\n  }\n\n  return (\n    <div style = {{marginBottom: \"1rem\"}} className = \"notification-holder\">\n      <p style = {{marginTop: \"auto\", marginBottom: \"auto\"}}> {props.student ? \"You have \" : data.student.forename + \" \" + data.student.surname + \" has \" } a recorded {props.type} of{\" \"}\n      <span style={{fontWeight: \"bolder\", color: \"red\"}}> {Math.round(stat)}% </span> in the class{\" \"}\n      <span style={{fontWeight: \"bolder\"}}>{data.class_code.toUpperCase()}. </span> </p>\n      {props.student ? null : <Link style = {{height: \"100%\"}}\n        className=\"profile-button-link\"\n        to={\"/profile/\" + data.class_code.toLowerCase() + \"/\" + data.matric}\n      >\n        <Button style = {{height: \"100%\"}} className=\"profile-button\">Go to Profile</Button>\n  </Link> }\n    </div>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Constants/studentConstants.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Constants/lectureConstants.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Constants/courseworkConstants.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Indicators/NotificationBell.js",["402"],"/**\n * Responsible for displaying the number of notifications in the header.\n * Dispatches action to get notifications every 5 minutes to keep notifications up to date.\n */\n\n\nimport React from \"react\";\nimport { AiOutlineBell } from \"react-icons/ai\";\nimport { useEffect, useState } from \"react\";\nimport { staffNotifications } from \"../../Actions/staffUserActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nexport default function NotficationBell() {\n  const staffSignIn = useSelector((state) => state.staffSignIn);\n  const staffID = staffSignIn.staffInfo.data.staff_id;\n  const [numberNotifications, setNumberNotifications] = useState(0);\n\n  const dispatch = useDispatch();\n  const notes = useSelector((state) => state.notifications);\n  const { notifications } = notes;\n\n\n  useEffect(() => {\n    if (!notifications && staffID) {\n      dispatch(staffNotifications(staffID));\n     } else {\n      var count = 0;\n      if (notifications && notifications.classes && notifications.classes.length > 0) {\n        notifications.classes.forEach((element) => {\n          if (element.low_attendances && element.low_attendances.length > 0) {\n            count = count + element.low_attendances.length;\n          }\n          if (element.low_grades && element.low_grades.length > 0) {\n            count = count + element.low_grades.length;\n          }\n        })\n      }\n      if (notifications && notifications.departments && notifications.departments.length > 0) {\n        notifications.departments.forEach((element) => {\n          if (element.department_notifications && element.department_notifications.length > 0) {\n            count = count + element.department_notifications.length;\n          }\n        })\n      }\n      if (notifications && notifications.students && notifications.students.length > 0) {\n        count = count + notifications.students.length\n      }\n      setNumberNotifications(count)\n    } \n    /** Dispatch every 5 mins */\n    const interval = setInterval(() => {\n      dispatch(staffNotifications(staffID));\n    }, 600000); \n    return () => clearInterval(interval);\n  }, [dispatch, notifications, /*staffID, error */]);\n\n  return (\n    <>\n      <div className=\"flex\">\n        <AiOutlineBell />\n        <div className=\"num-notif\">{numberNotifications}</div>\n      </div>\n    </>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Indicators/UserProfileIcon.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/ClassProfileComponents/AttendanceInfo.js",["403"],"/**\n * Provides feedback in the class profile dependant on attendance statistics and grades.\n */\n\nimport React from \"react\";\nimport Card from \"react-bootstrap/esm/Card\";\nimport AttendanceFeedback from \"../Feedback/AttendanceFeedback\";\nimport moment from \"moment\";\nimport Table from \"react-bootstrap/Table\";\nimport CourseworkFeedback from \"../Feedback/CourseworkFeedback\";\n\nexport default function AttendanceInfo(props) {\n\n  var attendanceStat = null;\n  var weighted_grades = null;\n\n  /* Despite attendance statistics/grades and enrolment having a 1:1 relationship it returns an array of length 1,\n  so need to index at [0]*/\n\n  if (props.data.attendance_stats.length > 0) {\n     attendanceStat = Math.round(props.data.attendance_stats[0].attendance_stat);\n  }\n  if (props.data.weighted_grades.length > 0) {\n    weighted_grades = Math.round(props.data.weighted_grades[0].coursework_average);\n  }  \n\n  return (\n    <div className=\"attendance-container\">\n      <Card>\n        <Card.Header>Attendance</Card.Header>\n        <Card.Body >\n          {attendanceStat == null ? <p style={{padding : \"1rem\", textAlign: \"center\"}}>There has not been any recorded classes yet.</p> :\n          <>\n          <div className=\"stat\">{attendanceStat}%</div>\n          <AttendanceFeedback stat={attendanceStat} />\n          </>\n          }\n        </Card.Body>\n      </Card>\n      {/* No need to display this if there's no classes or absences*/}\n      {attendanceStat === 100 || attendanceStat == null ? null : (\n        <Card>\n          <Card.Header>Absences</Card.Header>\n          <Card.Body style = {{display: \"flex\", textAlign: \"-webkit-center\"}} className = \"grid-gap attendance-card-body\">\n            <Table style = {{minWidth: \"300px\", width: \"80%\"}} bordered responsive>\n              <thead></thead>\n              <tbody>\n                {props.data.attendances.map((current) =>\n                  current.attended == 1 ? null : (\n                    <tr key={current.id}>\n                      <td className=\"table-title-cell\">\n                        {moment(current.lecture_session.class_date).format(\n                          \"MMMM Do YYYY\"\n                        )}\n                      </td>\n                    </tr>\n                  )\n                )}\n              </tbody>\n            </Table>\n          </Card.Body>\n        </Card>\n      )}\n      <Card>\n        <Card.Header>Average Coursework Grade</Card.Header>\n        <Card.Body>\n          {weighted_grades == null ? <p style={{padding : \"1rem\", textAlign: \"center\"}}>{props.data.forename} does not have any coursework marked yet.</p> : \n          <>\n          <div className=\"stat\">{weighted_grades}%</div>\n          <CourseworkFeedback stat={weighted_grades} />\n          </>\n          }\n        </Card.Body>\n      </Card>\n\n      {props.data.coursework_grades.length > 0 ?\n      <Card>\n        <Card.Header>Coursework Breakdown</Card.Header>\n        <Card.Body>\n          <Table bordered responsive>\n            <thead>\n              <tr>\n                <td className=\"table-title-cell\">Title</td>\n                <td className=\"table-title-cell\">Weight</td>\n                <td className=\"table-title-cell\">Grade</td>\n              </tr>\n            </thead>\n            <tbody>\n              {props.data.coursework_grades.map((current) => (\n                <tr key={current.coursework.id}>\n                  <td>{current.coursework.title}</td>\n                  <td>{current.coursework.weight}%</td>\n                  <td>{!current.grade ? \"-\" : current.grade + \"%\"}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Card.Body>\n      </Card>\n      : null }\n    </div>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/ClassProfileComponents/GeneralInfo.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Functions/generatePDF.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/SuperProfileComponents/Overview.js",["404"]," /**\n * Overview for superprofile,\n * displays information such as student name, email etc\n * Due to structure of JSON objects returned from serverside this couldn't be\n * merged with the class overview for class profile\n * This could be investigated further in further developments.\n */\n\nimport React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\nimport moment from \"moment\";\nimport Alert from 'react-bootstrap/Alert';\n\nexport default function Overview(props) {\n\n  return (\n    <div className=\"table-container-grid\">\n      <Card>\n        <Card.Header>Student Info</Card.Header>\n        <Card.Body>\n          <Table bordered responsive>\n            <thead></thead>\n            <tbody>\n              <tr>\n                <td className=\"table-title-cell\">Name</td>\n                <td>\n                  {props.data.forename} {props.data.surname}\n                </td>\n              </tr>\n              <tr>\n                <td className=\"table-title-cell\">Course</td>\n                <td>{props.data.course.course_title}</td>\n              </tr>\n              <tr>\n                <td className=\"table-title-cell\">Academic Year</td>\n                <td>{props.data.year}</td>\n              </tr>\n              <tr>\n                <td className=\"table-title-cell\">Department</td>\n                <td>{props.data.course.department.dept_title}</td>\n              </tr>\n              <tr>\n                <td className=\"table-title-cell\">Advisor</td>\n                <td>\n                  {props.data.staff.forename} {props.data.staff.surname}\n                </td>\n              </tr>\n            </tbody>\n          </Table>\n        </Card.Body>\n      </Card>\n      <Card>\n        <Card.Header>Enrolment</Card.Header>\n        <Card.Body>\n          {props.data.classes.length === 0 ? (\n            <Alert style={{marginTop: \"1rem\", textAlign: \"center\"}} variant=\"warning\">Not enrolled in any classes</Alert>\n          ) : (\n            <Table bordered responsive>\n              <thead></thead>\n              <tbody>\n                {props.data.classes.map((currentClass, index) => (\n                  <tr key={index}>\n                    <td className=\"table-title-cell\">\n                      {currentClass.class_code}\n                    </td>\n                    <td>{currentClass.class_title}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          )}\n        </Card.Body>\n      </Card>\n      {props.data.extenuating_circumstances.length == 0 ? null : \n      <Card>\n        <Card.Header>Notifications</Card.Header>\n        <Card.Body>\n          <Card.Text>\n            The below circumstances have been logged that may be affecting{\" \"}\n            {props.student ? \"your\" : props.data.forename + \"'s\"} studies. <br />\n            The details of these are only available to advisors and departmental\n            staff.\n          </Card.Text>\n          <Table bordered responsive>\n            <tbody>\n              {props.data.extenuating_circumstances.map((element, index) => (\n                <>\n                  {!element.circumstances_type ||\n                  element.circumstances_type == null ? null : (\n                    <tr key = {index}>\n                      <td className=\"table-title-cell\">\n                        {element.circumstances_type.name}\n                      </td>\n                      <td>{moment(element.date).format(\"MMMM Do YYYY\")}</td>\n                      <td>\n                        {element.details}\n                      </td>\n                    </tr>\n                  )}\n                </>\n              ))}\n            </tbody>\n          </Table>\n        </Card.Body>\n      </Card>\n      }\n    </div>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/SuperProfileComponents/ClassOverview.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Constants/classConstants.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Constants/studentUserConstants.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Feedback/CourseworkFeedback.js",[],["405","406"],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Feedback/AttendanceFeedback.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Constants/staffUserConstants.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Indicators/StatsIndicator.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Actions/lectureActions.js",["407"],"/**\n * This contains all actions for taking attendance at both lectures and subclasses such\n * as tutorials.\n * The corresponding reducers can be found in ../Reducers/lectureReducers.js\n */\n\nimport axios from \"axios\";\nimport {\n  DEFAULT_ATTENDANCE_REQUEST,\n  STUDENT_QR_ATTENDANCE_FAIL,\n  STUDENT_QR_ATTENDANCE_REQUEST,\n  STUDENT_QR_ATTENDANCE_SUCCESS,\n  ADD_SUB_FAIL,\n  ADD_SUB_REQUEST,\n  ADD_SUB_SUCCESS,\n  GET_SUB_REGISTER_FAIL,\n  GET_SUB_REGISTER_REQUEST,\n  GET_SUB_REGISTER_SUCCESS,\n  GET_SUB_CLASSES_FAIL,\n  GET_SUB_CLASSES_REQUEST,\n  GET_SUB_CLASSES_SUCCESS,\n  GET_LECTURE_SESSIONS_REQUEST,\n  GET_LECTURE_SESSIONS_SUCCESS,\n  GET_LECTURE_SESSIONS_FAIL,\n  GET_LECTURE_ATTENDANCE_REQUEST,\n  GET_LECTURE_ATTENDANCE_SUCCESS,\n  GET_LECTURE_ATTENDANCE_FAIL,\n  LOG_ATTENDANCE_EMAIL_REQUEST,\n  LOG_ATTENDANCE_EMAIL_SUCCESS,\n  LOG_ATTENDANCE_EMAIL_FAIL,\n  LOG_ATTENDANCE_REQUEST,\n  LOG_ATTENDANCE_SUCCESS,\n  LOG_ATTENDANCE_FAIL,\n  ADD_LECTURE_REQUEST,\n  ADD_LECTURE_FAIL,\n  ADD_LECTURE_SUCCESS,\n} from \"../Constants/lectureConstants\";\n\n/**\n * \n * @param {*} students\n * Takes an array of JSON objects indicating all students absent.\n * Dispatches when the QR method of attendance is confirmed \n */\nexport const defaultAttendance = (students) => async (dispatch) => {\n  dispatch({type : DEFAULT_ATTENDANCE_REQUEST});\n  try {\n    const data = await axios.post(\"/gtb17118-nodejs/lectures/addStudentsLecture\", {\n      students : students,\n    })\n  } catch (error) {\n    console.log(error)\n  }\n\n}\n\n/**\n * \n * @param {*} group_id\n * Fetches a list of students for a given subclass such as tutorials \n */\n\nexport const getSubClassesRegister = (group_id) => async (dispatch) => {\n  dispatch({\n    type: GET_SUB_REGISTER_REQUEST,\n  });\n  try {\n    const data = await axios.get(\n      \"/gtb17118-nodejs/lectures/getSubClassesRegister\",\n      {\n        params: {\n          group_id: group_id,\n        },\n      }\n    );\n    dispatch({ type: GET_SUB_REGISTER_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: GET_SUB_REGISTER_FAIL, payload: error.message });\n  }\n};\n\n/**\n * \n * @param {*} class_code\n * Fetches list of all subgroups of a given class. \n */\n\nexport const getSubClasses = (class_code) => async (dispatch) => {\n  dispatch({\n    type: GET_SUB_CLASSES_REQUEST,\n  });\n  try {\n    const data = await axios.get(\n      \"/gtb17118-nodejs/lectures/getSubClasses\",\n      {\n        params: {\n          class_code: class_code,\n        },\n      }\n    );\n    dispatch({ type: GET_SUB_CLASSES_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: GET_SUB_CLASSES_FAIL, payload: error.message });\n  }\n};\n\n/**\n * \n * @param {*} class_code\n * Fetches all lecture sessions for a given class.\n * Mostly used for testing during implementation. \n */\n\nexport const getLectureSessions = (class_code) => async (dispatch) => {\n  dispatch({\n    type: GET_LECTURE_SESSIONS_REQUEST,\n  });\n  try {\n    const data = await axios.get(\n      \"/gtb17118-nodejs/lectures/getLectureSessions\",\n      {\n        params: {\n          class_code: class_code,\n        },\n      }\n    );\n    dispatch({ type: GET_LECTURE_SESSIONS_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: GET_LECTURE_SESSIONS_FAIL, payload: error.message });\n  }\n};\n\n/**\n * \n * @param {*} class_code \n * @param {*} date \n * @param {*} time \n * Adds lecture to database.\n */\n\nexport const addLecture = (class_code, date, time) => async (dispatch) => {\n  dispatch({\n    type: ADD_LECTURE_REQUEST,\n  });\n  try {\n    const data = await axios.post(\"/gtb17118-nodejs/lectures/addLecture\", {\n      params: {\n        class_code: class_code,\n        date: date,\n        time: time,\n      },\n    });\n    dispatch({ type: ADD_LECTURE_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: ADD_LECTURE_FAIL, payload: error.message });\n  }\n};\n\n/**\n * \n * @param {*} class_code \n * @param {*} date \n * @param {*} time \n * @param {*} group_id \n * Adds sub class session to database.\n */\n\nexport const addSub = (class_code, date, time, group_id) => async (dispatch) => {\n  dispatch({\n    type: ADD_SUB_REQUEST,\n  });\n  try {\n    const data = await axios.post(\"/gtb17118-nodejs/lectures/addSubClass\", {\n      params: {\n        class_code: class_code,\n        date: date,\n        time: time,\n        group_id : group_id\n      },\n    });\n    dispatch({ type: ADD_SUB_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: ADD_SUB_FAIL, payload: error.message });\n  }\n};\n\n/**\n * \n * @param {*} students \n * @param {*} class_code \n * Bulk adds lecture attendance for a given lecture\n */\n\nexport const logLectureAttendance = (students, class_code) => async (dispatch) => {\n  dispatch({\n    type: LOG_ATTENDANCE_REQUEST,\n  });\n  try {\n    const data = await axios.post(\n      \"/gtb17118-nodejs/lectures/logAttendance\",\n      {\n        params: {\n          students: students,\n          class_code: class_code\n        },\n      }\n    );\n    dispatch({ type: LOG_ATTENDANCE_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: LOG_ATTENDANCE_FAIL, payload: error.message });\n  }\n};\n\n/**\n * \n * @param {*} attended \n * @param {*} notAttended \n * @param {*} session_id \n * This was used before the conversion from email to matriculation for uploading attendance via CSV.\n * Email is used to uniquely identify students in a table to log attendance.\n * Not used in application but could be useful for further developments.\n */\n\nexport const logLectureAttendanceEmail = (\n  attended,\n  notAttended,\n  session_id\n) => async (dispatch) => {\n  dispatch({\n    type: LOG_ATTENDANCE_EMAIL_REQUEST,\n  });\n  try {\n    const data = await axios.post(\n      \"/gtb17118-nodejs/lectures/logAttendanceEmail\",\n      {\n        params: {\n          attended: attended,\n          notAttended: notAttended,\n          session_id: session_id,\n        },\n      }\n    );\n    dispatch({ type: LOG_ATTENDANCE_EMAIL_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: LOG_ATTENDANCE_EMAIL_FAIL, payload: error.message });\n  }\n};\n\n/**\n * \n * @param {*} session_id \n * @param {*} matric \n * Dispatches event to log attendance for an individual student, used for when\n * student scans QR code to log attendance.\n */\n\nexport const studentQRAttendance = (session_id, matric) => async (dispatch) => {\n  dispatch({\n    type: STUDENT_QR_ATTENDANCE_REQUEST,\n  });\n  try {\n    const data = await axios.post(\n      \"/gtb17118-nodejs/lectures/studentQRAttendance\",\n      {\n        params: {\n          session_id: session_id,\n          matric: matric\n        },\n      }\n    );\n    dispatch({ type: STUDENT_QR_ATTENDANCE_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: STUDENT_QR_ATTENDANCE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n/**\n * \n * @param {*} session_id \n * Used to display successful attendance submission.\n * Due to the nature of the bulk create, it would not return the bulk create as \n * an object, so the attendance has to be queried after submission.\n */\n\nexport const getLectureAttendance = (session_id) => async (dispatch) => {\n  dispatch({\n    type: GET_LECTURE_ATTENDANCE_REQUEST,\n  });\n  try {\n    const data = await axios.post(\n      \"/gtb17118-nodejs/lectures/getLectureAttendance\",\n      {\n        params: {\n          session_id: session_id,\n        },\n      }\n    );\n    dispatch({ type: GET_LECTURE_ATTENDANCE_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: GET_LECTURE_ATTENDANCE_FAIL, payload: error.message });\n  }\n};\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Indicators/MarksIndicator.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Constants/attendanceConstants.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Utilities/LectureQR.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Utilities/LectureCSV.js",["408","409","410","411","412"],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Tables/tableStyle.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Tables/ManualAttendanceTable.js",["413"],"/**\n * The component is responsible for attendance via checklist\n */\n\nimport React from \"react\";\nimport DataTable from \"react-data-table-component\";\nimport { useDispatch } from \"react-redux\";\nimport { customStyles } from \"./tableStyle\";\nimport { useSelector } from \"react-redux\";\nimport { logLectureAttendance } from \"../../Actions/lectureActions\";\nimport Button from \"react-bootstrap/Button\";\n\nexport default function ManualAttendanceTable(props) {\n  const dispatch = useDispatch();\n  const classList = useSelector((state) => state.studentClassList);\n  const { students: studentsList } = classList;\n  const lecture = useSelector((state) => state.addLectureToDB);\n  const { classes: lectureDone } = lecture;\n\n  var notAttended = [];\n  var attended = [];\n  var matrics = [];\n  var filtered = [];\n\n  /**\n   * conditional on whether this is a smaller class such as tutoral or a lecture\n   * converts to readable object array for react-data-table-component\n   */\n  if (props.group_id && props.students) {\n    var temprows = [];\n    props.students.subclass_enrolments.forEach((element) => {\n      temprows.push({\n        id: element.enrolment.student.matric,\n        matric: element.enrolment.student.matric,\n        forename: element.enrolment.student.forename,\n        surname: element.enrolment.student.surname,\n      });\n      matrics.push(element.enrolment.student.matric);\n    });\n    filtered = temprows;\n  } else if (studentsList) {\n    var temprows = [];\n    studentsList.data.students.forEach((element) => {\n      temprows.push({\n        id: element.matric,\n        matric: element.matric,\n        forename: element.forename,\n        surname: element.surname,\n      });\n      matrics.push(element.matric);\n    });\n    filtered = temprows;\n  }\n\n  //defines columns for the react-data-table-component\n  const columns = [\n    { name: \"Matric\", selector: \"matric\", sortable: true },\n    {\n      name: \"Forename\",\n      selector: \"forename\",\n      sortable: true,\n    },\n    {\n      name: \"Surname\",\n      selector: \"surname\",\n      sortable: true,\n    },\n  ];\n\n  //converts the selected rows into an object array for the bulk create on server side.\n  //after conversion dispatches action to log attendance\n  function handleSubmitClick() {\n    var students = [];\n    notAttended = matrics.filter((x) => !attended.includes(x));\n    notAttended.forEach((student) => {\n      students.push({\n        session_id: props.session_id ? props.session_id : lectureDone.data.id,\n        student_id: student,\n        attended: 0,\n      });\n    });\n    attended.forEach((student) => {\n      students.push({\n        session_id: props.session_id ? props.session_id : lectureDone.data.id,\n        student_id: student,\n        attended: 1,\n      });\n    });\n    dispatch(logLectureAttendance(students/*, studentsList.data.class_code*/));\n  }\n\n  function handleSelect(rows) {\n    attended = [];\n    rows.selectedRows.forEach((element) => {\n      attended.push(element.matric);\n    });\n  }\n\n  return (\n    <>\n      {filtered.length > 0 && (\n        <div className=\"manual-attendance-table-container\">\n          <DataTable\n            noHeader={true}\n            className=\"data-table\"\n            columns={columns}\n            data={filtered}\n            selectableRows={true}\n            selectableRowSelected={(row) => row.selected}\n            customStyles={customStyles}\n            noDataComponent={null}\n            noContextMenu=\"true\"\n            onSelectedRowsChange={(selectedRows) => handleSelect(selectedRows)}\n          />\n          <Button className=\"button\" onClick={() => handleSubmitClick()}>\n            Submit Attendance\n          </Button>\n        </div>\n      )}\n    </>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Tables/StudentSuperTable.js",["414","415"],"/**\n * Component for displaying the table for departmental staff/advisees\n * Offers abilty for multiple filters\n * Displays a warning if student has any departmental notifications\n */\n\nimport React from \"react\";\nimport DataTable from \"react-data-table-component\";\nimport { customStyles } from \"./tableStyle\";\nimport { useState, useMemo } from \"react\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport FormLabel from \"react-bootstrap/FormLabel\";\nimport { CgProfile } from \"react-icons/cg\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"react-router-dom\";\nimport Card from \"react-bootstrap/Card\";\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\nimport {AiFillWarning} from \"react-icons/ai\";\n\nexport default function StudentSuperTable(props) {\n  //define filters\n  const [filterVal, setFilterVal] = useState(\"\");\n  const [filterYear, setFilterYear] = useState(false);\n  const [filterCourse, setFilterCourse] = useState(\"\");\n\n  const data = props.data;\n  var temprows = [];\n\n  //convert to readable format for react-data-table-component\n  data.forEach((element) => {\n    temprows.push({\n      id: element.matric,\n      matric: element.matric,\n      forename: element.forename,\n      surname: element.surname,\n      year: element.year,\n      course: element.course.course_title,\n      department_notifications : element.department_notifications\n    });\n  });\n  //apply filters\n  var filtered = temprows.filter(\n    (item) =>\n      item.matric.includes(filterVal) ||\n      item.forename.toLowerCase().includes(filterVal.toLowerCase()) ||\n      item.surname.toLowerCase().includes(filterVal.toLowerCase())\n  );\n  filtered = filtered.filter((item) => item.course.toLowerCase().includes(filterCourse.toLowerCase()));\n  if (filterYear) {\n    filtered = filtered.filter((item) => item.year == filterYear);\n  }\n\n  const filterBox = useMemo(() => {\n    return (\n      <>\n        <FormLabel>Filter by Name/Matriculation Number:</FormLabel>\n        <FormControl\n          className = \"search-bar\"\n          value={filterVal}\n          onChange={(e) => setFilterVal(e.target.value)}\n          aria-label=\"Default\"\n          aria-describedby=\"inputGroup-sizing-default\"\n          placeholder=\"Search Students\"\n        />\n        <FormLabel>Filter by Course: </FormLabel>\n        <FormControl\n          className = \"search-bar\"\n          value={filterCourse}\n          onChange={(e) => setFilterCourse(e.target.value)}\n          aria-label=\"Default\"\n          aria-describedby=\"inputGroup-sizing-default\"\n          placeholder=\"Search Courses\"\n        />\n        <div className = \"align-toggle-button\">\n        <div className = \"filter-toggle-button-container\">\n        <FormLabel>Filter by Year: </FormLabel>\n        <ToggleButtonGroup\n          className=\"filter-button-group\"\n          value={filterYear}\n          type=\"radio\"\n          name=\"year\"\n          onChange={(e) => setFilterYear(e)}\n        >\n          <ToggleButton value=\"1\"> 1 </ToggleButton>\n          <ToggleButton value=\"2\"> 2 </ToggleButton>\n          <ToggleButton value=\"3\"> 3 </ToggleButton>\n          <ToggleButton value=\"4\"> 4 </ToggleButton>\n          <ToggleButton value=\"5\"> 5 </ToggleButton>\n        </ToggleButtonGroup>\n        </div>\n        </div>\n        <Button onClick={() => clearFilters()} className=\"button\">\n          Clear Filters\n        </Button>\n      </>\n    );\n  });\n\n  //destroy all filters\n  function clearFilters() {\n    setFilterCourse(\"\");\n    setFilterVal(\"\");\n    setFilterYear(false);\n  }\n\n  //defines columns for react-data-table-component.\n  const columns = [\n    { name: \"Matric\", selector: \"matric\", hide: \"md\", sortable: true },\n    {\n      name: \"Forename\",\n      selector: \"forename\",\n      sortable: true,\n    },\n    {\n      name: \"Surname\",\n      selector: \"surname\",\n      sortable: true,\n    },\n    {\n      name: \"Course\",\n      hide: \"sm\",\n      selector: \"course\",\n      sortable: true,\n    },\n    {\n      name: \"Year\",\n      width: \"80px\",\n      hide: \"sm\",\n      selector: \"year\",\n      sortable: true,\n    },\n    {\n      name: \"\",\n      width: \"80px\",\n      hide: \"md\",\n      selector: \"\",\n      cell : (row) => {\n      if (row.department_notifications.length > 0) { return <AiFillWarning style = {{fontSize : \"xx-large\"}} className = \"warning\" /> } else { return null }\n      }\n    },\n    {\n      name: \"\",\n      selector: \"\",\n      style: {\n        justifyContent: \"flex-end\",\n      },\n      sortable: false,\n      cell: (row) => (\n        <Link\n          className=\"profile-button-link\"\n          to={\"/profile/advisor/\" + row.matric}\n        >\n          <Button className=\"profile-button\">\n            <span className=\"sm-label\">Profile</span>\n            <CgProfile />\n          </Button>\n        </Link>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"table-screen-layout\">\n      <Card className=\"default-padding\">{filterBox}</Card>\n\n      <Card>\n        <Card.Header>{props.table_header}</Card.Header>\n        <Card.Body>\n          <DataTable\n            noHeader={true}\n            className=\"super-data-table\"\n            columns={columns}\n            data={filtered}\n            customStyles={customStyles}\n            noContextMenu=\"true\"\n          />\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Tables/DisplayAttendanceCSV.js",["416"],"/**\n * Displays successful attendance in a table\n * used for after CSV attendance and manual.\n */\n\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { getLectureAttendance } from \"../../Actions/lectureActions\";\nimport { useEffect } from \"react\";\nimport DataTable from \"react-data-table-component\";\nimport { customStyles } from \"../Tables/tableStyle\";\nimport { AiOutlineCheck } from \"react-icons/ai\";\nimport { AiOutlineClose } from \"react-icons/ai\";\nimport Alert from \"react-bootstrap/Alert\";\nimport {\n  LOG_ATTENDANCE_RESET,\n  ADD_LECTURE_RESET,\n} from \"../../Constants/lectureConstants\";\nimport { CSSTransition } from \"react-transition-group\";\n\nexport default function DisplayAttendanceCSV(props) {\n  const dispatch = useDispatch();\n  const attendance = useSelector((state) => state.getAttendance);\n  const { classes } = attendance;\n\n  var filtered = [];\n\n  useEffect(() => {\n    dispatch(getLectureAttendance(props.session_id));\n\n    //clean up state after unmount\n    return function cleanup() {\n      dispatch({ type: LOG_ATTENDANCE_RESET });\n      dispatch({ type: ADD_LECTURE_RESET });\n    };\n  }, [dispatch, props.session_id]);\n\n  //once class attendance has been loaded, convert to readable format for react data table \n  //component\n  if (classes) {\n    var temprows = [];\n    classes.data.forEach((element) => {\n      temprows.push({\n        id: element.student.matric,\n        matric: element.student.matric,\n        forename: element.student.forename,\n        surname: element.student.surname,\n        attended: element.attended,\n      });\n    });\n    filtered = temprows;\n  }\n\n  //defines columns for react-data-table props\n  const columns = [\n    { name: \"Matric\", selector: \"matric\", sortable: false, hide: \"md\" },\n    {\n      name: \"Forename\",\n      selector: \"forename\",\n      sortable: false,\n    },\n    {\n      name: \"Surname\",\n      selector: \"surname\",\n      sortable: false,\n    },\n    {\n      name: \"Attended\",\n      selector: \"attended\",\n      cell: (row) => <AttendanceIndicator attended={row.attended} />,\n    },\n  ];\n\n  //returns a red cross for absent, green tick for attendanced\n  function AttendanceIndicator(props) {\n    const attended = props.attended;\n    if (attended == 0) {\n      return <AiOutlineClose className=\"danger\" />;\n    } else {\n      return <AiOutlineCheck className=\"excellent\" />;\n    }\n  }\n\n  return (\n    <div>\n      {classes ? (\n        <CSSTransition\n          appear={true}\n          in={classes}\n          timeout={300}\n          classNames=\"fade\"\n        >\n          <div>\n            <Alert style={{ textAlign: \"center\" }} variant=\"info\">\n              Attendance recorded!\n            </Alert>\n            <div className=\"max-width-900\">\n              <DataTable\n                noDataComponent={null}\n                noHeader={true}\n                className=\"data-table\"\n                columns={columns}\n                data={filtered}\n                customStyles={customStyles}\n                noContextMenu=\"true\"\n              />\n            </div>\n          </div>\n        </CSSTransition>\n      ) : null}\n    </div>\n  );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/Attendance/TakeAttendanceQR.js",["417"],"/**\n * Screen that is displayed when students scan QR code\n */\n\nimport React, { useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { studentQRAttendance } from '../../Actions/lectureActions'\nimport Card from 'react-bootstrap/Card'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Alert from 'react-bootstrap/Alert'\n\nexport default function TakeAttendanceQR() {\n    const dispatch = useDispatch();\n    let { id } = useParams()\n\n    const log = useSelector((state) => state.studentQR);\n    const [studentID, setStudentID] = useState(\"\");\n    const [inputError, setInputError] = useState(\"\");\n\n    function handleIDChange(e) {\n        setStudentID(e.target.value)\n    }\n\n    function handleSubmitClick() {\n        if (studentID == null || studentID == \"\") {\n            setInputError(\"Please enter your Student ID\")\n        }\n        else {\n            dispatch(studentQRAttendance(id, studentID))\n        }\n    }\n\n\n    return (\n        <div style={{ margin: \"1rem\", padding: \"1rem\" }}>\n            <Card style={{ marginTop: \"1rem\" }}>\n                <Card.Header>Logging attendance for lecture #{id}</Card.Header>\n                <Card.Body style={{ padding: \"1rem\", display: \"flex\", flexDirection: \"column\" }}>\n                    <InputGroup style={{ width: \"100%\" }}>\n                        Please enter your Student ID:\n                            <FormControl style={{ width: \"100%\" }} className=\"search-bar\" onChange={handleIDChange} />\n                        <span className=\"error-message\">{inputError}</span> <br />\n                    </InputGroup>\n                    {log.attendance ? null :\n                        <Button onClick={() => handleSubmitClick()} style={{ marginTop: \"1rem\", fontSize: \"2rem\" }} className=\"button\">Submit Attendance</Button>\n                    }\n                    {log.error ?\n                        <Alert style={{ marginTop: \"1rem\" }} variant=\"danger\">{log.error}</Alert>\n                        : log.attendance ?\n                            <Alert style={{ marginTop: \"1rem\" }} variant=\"success\">Attendance Recorded! </Alert>\n                            : null}\n                </Card.Body>\n            </Card>\n        </div>\n    )\n}","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Feedback/DepartmentNotificationCard.js",["418","419"],"/**\n * Notification for department or advisors\n * As they are notified for 2+ classes with unsatisfactory attendances/grades, they will receive a \n * difference notication card than the class notification.\n * The amount of classes they have concerning statistics in will be displayed instead of the stats.\n */\n\nimport React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"react-router-dom\";\n\nexport default function NotificationCard(props) {\n    const data = props.data;\n    var low_grades = 0;\n    var low_attendance = 0;\n    if (data.cumulative_attendance > 1) {\n        low_attendance = data.cumulative_attendance\n    }\n    if (data.cumulative_grades > 1) {\n        low_grades = data.cumulative_grades\n    }\n\n    return (\n        <div style={{ marginBottom: \"1rem\" }} className=\"notification-holder\">\n            <p style={{ marginTop: \"auto\", marginBottom: \"auto\" }}>{data.student.forename} {data.student.surname} {low_grades > 0 && low_attendance > 0 ? <> has poor grades in <span style={{ fontWeight: \"bolder\", color: \"red\" }}>{low_grades}</span> classes and low attendance in <span style={{ fontWeight: \"bolder\", color: \"red\" }}>{low_attendance}</span> classes.</> :\n                low_grades > 0 && low_attendance == 0 ? <> has poor grades in <span style={{ fontWeight: \"bolder\", color: \"red\" }}>{low_grades}</span> classes. </> :\n                    low_grades == 0 && low_attendance > 0 ? <> has poor grades in <span style={{ fontWeight: \"bolder\", color: \"red\" }}>{low_grades}</span> classes and low attendance in \" + <span style={{ fontWeight: \"bolder\", color: \"red\" }}>{low_attendance}</span> classes. </> : null}\n            </p>\n            <Link style={{ height: \"100%\" }}\n                className=\"profile-button-link\"\n                to={\"/profile/advisor/\" + data.matric}\n            >\n                <Button style={{ height: \"100%\" }} className=\"profile-button\">Go to Profile</Button>\n            </Link>\n        </div>\n    );\n}\n","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Indicators/StudentNotificationBell.js",[],"/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Screens/StudentNotificationScreen.js",["420","421","422"],"import React from 'react'\nimport { useSelector } from 'react-redux'\nimport NotificationCard from \"../Components/Feedback/NoticationCard\";\nimport Card from 'react-bootstrap/Card'\nimport Alert from 'react-bootstrap/Alert'\n\n/* A component that makes up the screen to display student notifications */\n\nexport default function StudentNotificationScreen() {\n\n    /* As notifications will have been gathered on login, get notifications from state */\n\n    const notes = useSelector((state) => state.studentNotifications);\n    const { notifications, error } = notes;\n\n    console.log(notifications)\n\n    return (\n        <div style={{ margin: \"1rem\" }}>\n            {error ? <Alert variant=\"danger\">Error getting notifications.</Alert>\n                : notifications ?\n                    <div>\n                        <Card style={{ padding: \"1rem\" }}>\n                            {notifications.low_grades && notifications.low_grades.length == 0 && notifications.low_attendances && notifications.low_attendances.length == 0 ?\n                            <Alert variant=\"info\" style = {{margin: \"0\"}}>You don't have any notifications!</Alert> : null    \n                        }\n                            {notifications.low_grades ? notifications.low_grades.map((element, index) =>\n                                <NotificationCard type=\"average grade\" key={index} student={true} data={element} />\n                            ) : null}\n                            {notifications.low_attendances ? notifications.low_attendances.map((element, index) =>\n                                <NotificationCard type=\"attendance\" key={index} student={true} key={index} data={element} />\n                            ) : null}\n                        </Card>\n                    </div>\n                    : null}\n        </div>\n    )\n}","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/LoginForms/StaffRegister.js",["423","424","425","426","427","428"],"/**\n * Handles register passsword for student and staff\n */\n\nimport React, { useState } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\nimport { useDispatch } from 'react-redux'\nimport { staffRegister } from '../../Actions/staffUserActions'\nimport { studentRegister } from '../../Actions/studentUserActions'\n\nexport default function StaffRegister(props) {\n\n    const dispatch = useDispatch();\n\n    //get type of user that is registering\n    const role = props.role;\n\n    const [id, setID] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [passwordVerify, setPasswordVerify] = useState(\"\")\n    const [errorArray, setErrorArray] = useState([])\n    const [success, setSuccess] = useState(false)\n\n    /**\n     * Verifies user input, no empty fields, password validation\n     */\n    function verifyInput() {\n        var temp = []\n        if (id == \"\" || id == null) {\n            temp.push(\"Please enter your staff ID.\")\n        }\n        if (password != passwordVerify) {\n            temp.push(\"The password fields must match!\")\n        } else if (password.length < 8) {\n            temp.push(\"Your password must be over 8 characters long.\")\n        }\n        if (temp.length > 0) {\n            setErrorArray(temp)\n        } else {\n            setSuccess(true)\n            if (role == \"staff\") {\n                dispatch(staffRegister(id, password))\n            }\n            else if (role == \"student\") {\n                dispatch(studentRegister(id, password))\n            }\n        }\n    }\n\n    return (\n        success ? <Alert variant=\"success\">Thanks! If this {role == \"staff\" ? <>staff</> : <>student</>} ID exists and isn't already registered, you can now log-in.</Alert> :\n            <div>\n                {errorArray.length > 0 ?\n\n                    <Alert variant=\"danger\">\n                        {errorArray.map((element, index) => <div key={index}>{element} <br /> </div>)}\n                    </Alert>\n                    : null}\n                <Form>\n                    <Form.Group>\n                        <Form.Label>{role == \"staff\" ? <>Staff ID</> : <>Student ID</>}</Form.Label>\n                        <Form.Control type=\"text\" onChange={(e) => setID(e.target.value)} />\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type=\"password\" onChange={(e) => setPassword(e.target.value)} />\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Re-enter Password</Form.Label>\n                        <Form.Control type=\"password\" onChange={(e) => setPasswordVerify(e.target.value)} />\n                    </Form.Group>\n                </Form>\n\n                <Button style={{ marginTop: \"1rem\" }} className=\"button\" onClick={() => verifyInput()}>Register</Button>\n            </div>\n    )\n}","/home/gtb17118/DEVWEB/2020/nodejs/Honours-Project/frontend/src/Components/Utilities/StudentRoute.js",[],{"ruleId":"429","replacedBy":"430"},{"ruleId":"431","replacedBy":"432"},{"ruleId":"433","severity":1,"message":"434","line":7,"column":8,"nodeType":"435","messageId":"436","endLine":7,"endColumn":12},{"ruleId":"433","severity":1,"message":"437","line":13,"column":11,"nodeType":"435","messageId":"436","endLine":13,"endColumn":18},{"ruleId":"433","severity":1,"message":"438","line":13,"column":20,"nodeType":"435","messageId":"436","endLine":13,"endColumn":29},{"ruleId":"433","severity":1,"message":"439","line":13,"column":31,"nodeType":"435","messageId":"436","endLine":13,"endColumn":36},{"ruleId":"433","severity":1,"message":"440","line":14,"column":11,"nodeType":"435","messageId":"436","endLine":14,"endColumn":25},{"ruleId":"433","severity":1,"message":"441","line":14,"column":27,"nodeType":"435","messageId":"436","endLine":14,"endColumn":38},{"ruleId":"433","severity":1,"message":"442","line":14,"column":40,"nodeType":"435","messageId":"436","endLine":14,"endColumn":52},{"ruleId":"443","severity":1,"message":"444","line":43,"column":87,"nodeType":"445","messageId":"446","endLine":43,"endColumn":89},{"ruleId":"443","severity":1,"message":"444","line":43,"column":146,"nodeType":"445","messageId":"446","endLine":43,"endColumn":148},{"ruleId":"443","severity":1,"message":"444","line":64,"column":79,"nodeType":"445","messageId":"446","endLine":64,"endColumn":81},{"ruleId":"443","severity":1,"message":"444","line":74,"column":65,"nodeType":"445","messageId":"446","endLine":74,"endColumn":67},{"ruleId":"443","severity":1,"message":"444","line":86,"column":73,"nodeType":"445","messageId":"446","endLine":86,"endColumn":75},{"ruleId":"443","severity":1,"message":"444","line":95,"column":54,"nodeType":"445","messageId":"446","endLine":95,"endColumn":56},{"ruleId":"447","severity":1,"message":"448","line":50,"column":6,"nodeType":"449","endLine":50,"endColumn":27,"suggestions":"450"},{"ruleId":"447","severity":1,"message":"451","line":85,"column":6,"nodeType":"449","endLine":85,"endColumn":58,"suggestions":"452"},{"ruleId":"443","severity":1,"message":"444","line":144,"column":73,"nodeType":"445","messageId":"446","endLine":144,"endColumn":75},{"ruleId":"447","severity":1,"message":"453","line":32,"column":6,"nodeType":"449","endLine":32,"endColumn":28,"suggestions":"454"},{"ruleId":"443","severity":1,"message":"444","line":77,"column":51,"nodeType":"445","messageId":"446","endLine":77,"endColumn":53},{"ruleId":"433","severity":1,"message":"455","line":6,"column":28,"nodeType":"435","messageId":"436","endLine":6,"endColumn":36},{"ruleId":"433","severity":1,"message":"456","line":20,"column":9,"nodeType":"435","messageId":"436","endLine":20,"endColumn":20},{"ruleId":"433","severity":1,"message":"457","line":17,"column":3,"nodeType":"435","messageId":"436","endLine":17,"endColumn":29},{"ruleId":"433","severity":1,"message":"458","line":44,"column":10,"nodeType":"435","messageId":"436","endLine":44,"endColumn":16},{"ruleId":"433","severity":1,"message":"459","line":44,"column":18,"nodeType":"435","messageId":"436","endLine":44,"endColumn":27},{"ruleId":"443","severity":1,"message":"460","line":51,"column":10,"nodeType":"445","messageId":"446","endLine":51,"endColumn":12},{"ruleId":"447","severity":1,"message":"461","line":68,"column":6,"nodeType":"449","endLine":68,"endColumn":51,"suggestions":"462"},{"ruleId":"443","severity":1,"message":"444","line":91,"column":15,"nodeType":"445","messageId":"446","endLine":91,"endColumn":17},{"ruleId":"443","severity":1,"message":"444","line":100,"column":21,"nodeType":"445","messageId":"446","endLine":100,"endColumn":23},{"ruleId":"443","severity":1,"message":"444","line":109,"column":16,"nodeType":"445","messageId":"446","endLine":109,"endColumn":18},{"ruleId":"443","severity":1,"message":"444","line":125,"column":17,"nodeType":"445","messageId":"446","endLine":125,"endColumn":19},{"ruleId":"443","severity":1,"message":"444","line":125,"column":42,"nodeType":"445","messageId":"446","endLine":125,"endColumn":44},{"ruleId":"443","severity":1,"message":"444","line":125,"column":62,"nodeType":"445","messageId":"446","endLine":125,"endColumn":64},{"ruleId":"443","severity":1,"message":"444","line":162,"column":39,"nodeType":"445","messageId":"446","endLine":162,"endColumn":41},{"ruleId":"443","severity":1,"message":"444","line":173,"column":36,"nodeType":"445","messageId":"446","endLine":173,"endColumn":38},{"ruleId":"443","severity":1,"message":"444","line":187,"column":33,"nodeType":"445","messageId":"446","endLine":187,"endColumn":35},{"ruleId":"433","severity":1,"message":"437","line":15,"column":11,"nodeType":"435","messageId":"436","endLine":15,"endColumn":18},{"ruleId":"433","severity":1,"message":"439","line":15,"column":29,"nodeType":"435","messageId":"436","endLine":15,"endColumn":34},{"ruleId":"429","replacedBy":"463"},{"ruleId":"431","replacedBy":"464"},{"ruleId":"433","severity":1,"message":"441","line":30,"column":11,"nodeType":"435","messageId":"436","endLine":30,"endColumn":22},{"ruleId":"433","severity":1,"message":"465","line":46,"column":10,"nodeType":"435","messageId":"436","endLine":46,"endColumn":23},{"ruleId":"433","severity":1,"message":"466","line":46,"column":25,"nodeType":"435","messageId":"436","endLine":46,"endColumn":41},{"ruleId":"443","severity":1,"message":"444","line":73,"column":67,"nodeType":"445","messageId":"446","endLine":73,"endColumn":69},{"ruleId":"443","severity":1,"message":"444","line":173,"column":32,"nodeType":"445","messageId":"446","endLine":173,"endColumn":34},{"ruleId":"433","severity":1,"message":"456","line":33,"column":9,"nodeType":"435","messageId":"436","endLine":33,"endColumn":20},{"ruleId":"433","severity":1,"message":"467","line":38,"column":10,"nodeType":"435","messageId":"436","endLine":38,"endColumn":16},{"ruleId":"433","severity":1,"message":"468","line":39,"column":30,"nodeType":"435","messageId":"436","endLine":39,"endColumn":51},{"ruleId":"447","severity":1,"message":"469","line":53,"column":21,"nodeType":"435","endLine":53,"endColumn":28},{"ruleId":"447","severity":1,"message":"469","line":98,"column":19,"nodeType":"435","endLine":98,"endColumn":26},{"ruleId":"470","severity":1,"message":"471","line":138,"column":7,"nodeType":"472","messageId":"446","endLine":138,"endColumn":15},{"ruleId":"443","severity":1,"message":"444","line":204,"column":38,"nodeType":"445","messageId":"446","endLine":204,"endColumn":40},{"ruleId":"433","severity":1,"message":"473","line":9,"column":3,"nodeType":"435","messageId":"436","endLine":9,"endColumn":20},{"ruleId":"443","severity":1,"message":"444","line":86,"column":35,"nodeType":"445","messageId":"446","endLine":86,"endColumn":37},{"ruleId":"447","severity":1,"message":"474","line":68,"column":6,"nodeType":"449","endLine":68,"endColumn":68,"suggestions":"475"},{"ruleId":"433","severity":1,"message":"476","line":37,"column":3,"nodeType":"435","messageId":"436","endLine":37,"endColumn":16},{"ruleId":"433","severity":1,"message":"477","line":15,"column":10,"nodeType":"435","messageId":"436","endLine":15,"endColumn":38},{"ruleId":"447","severity":1,"message":"478","line":49,"column":6,"nodeType":"449","endLine":49,"endColumn":53,"suggestions":"479"},{"ruleId":"443","severity":1,"message":"444","line":66,"column":61,"nodeType":"445","messageId":"446","endLine":66,"endColumn":63},{"ruleId":"443","severity":1,"message":"444","line":68,"column":25,"nodeType":"445","messageId":"446","endLine":68,"endColumn":27},{"ruleId":"433","severity":1,"message":"480","line":10,"column":16,"nodeType":"435","messageId":"436","endLine":10,"endColumn":24},{"ruleId":"433","severity":1,"message":"437","line":32,"column":11,"nodeType":"435","messageId":"436","endLine":32,"endColumn":18},{"ruleId":"433","severity":1,"message":"439","line":32,"column":27,"nodeType":"435","messageId":"436","endLine":32,"endColumn":32},{"ruleId":"443","severity":1,"message":"460","line":62,"column":43,"nodeType":"445","messageId":"446","endLine":62,"endColumn":45},{"ruleId":"443","severity":1,"message":"444","line":114,"column":53,"nodeType":"445","messageId":"446","endLine":114,"endColumn":55},{"ruleId":"433","severity":1,"message":"481","line":11,"column":8,"nodeType":"435","messageId":"436","endLine":11,"endColumn":23},{"ruleId":"433","severity":1,"message":"482","line":17,"column":10,"nodeType":"435","messageId":"436","endLine":17,"endColumn":25},{"ruleId":"433","severity":1,"message":"483","line":19,"column":10,"nodeType":"435","messageId":"436","endLine":19,"endColumn":16},{"ruleId":"433","severity":1,"message":"484","line":21,"column":10,"nodeType":"435","messageId":"436","endLine":21,"endColumn":29},{"ruleId":"447","severity":1,"message":"485","line":55,"column":8,"nodeType":"449","endLine":55,"endColumn":21,"suggestions":"486"},{"ruleId":"443","severity":1,"message":"444","line":14,"column":18,"nodeType":"445","messageId":"446","endLine":14,"endColumn":20},{"ruleId":"443","severity":1,"message":"444","line":16,"column":25,"nodeType":"445","messageId":"446","endLine":16,"endColumn":27},{"ruleId":"447","severity":1,"message":"487","line":55,"column":6,"nodeType":"449","endLine":55,"endColumn":52,"suggestions":"488"},{"ruleId":"443","severity":1,"message":"444","line":49,"column":36,"nodeType":"445","messageId":"446","endLine":49,"endColumn":38},{"ruleId":"443","severity":1,"message":"444","line":75,"column":52,"nodeType":"445","messageId":"446","endLine":75,"endColumn":54},{"ruleId":"429","replacedBy":"489"},{"ruleId":"431","replacedBy":"490"},{"ruleId":"433","severity":1,"message":"491","line":48,"column":11,"nodeType":"435","messageId":"436","endLine":48,"endColumn":15},{"ruleId":"447","severity":1,"message":"453","line":35,"column":6,"nodeType":"449","endLine":35,"endColumn":34,"suggestions":"492"},{"ruleId":"443","severity":1,"message":"460","line":47,"column":43,"nodeType":"445","messageId":"446","endLine":47,"endColumn":45},{"ruleId":"493","severity":1,"message":"494","line":95,"column":17,"nodeType":"435","messageId":"495","endLine":95,"endColumn":23},{"ruleId":"493","severity":1,"message":"494","line":112,"column":17,"nodeType":"435","messageId":"495","endLine":112,"endColumn":23},{"ruleId":"443","severity":1,"message":"444","line":140,"column":31,"nodeType":"445","messageId":"446","endLine":140,"endColumn":33},{"ruleId":"493","severity":1,"message":"496","line":42,"column":9,"nodeType":"435","messageId":"495","endLine":42,"endColumn":17},{"ruleId":"443","severity":1,"message":"444","line":51,"column":52,"nodeType":"445","messageId":"446","endLine":51,"endColumn":54},{"ruleId":"447","severity":1,"message":"469","line":54,"column":21,"nodeType":"435","endLine":54,"endColumn":28},{"ruleId":"443","severity":1,"message":"444","line":78,"column":18,"nodeType":"445","messageId":"446","endLine":78,"endColumn":20},{"ruleId":"443","severity":1,"message":"444","line":28,"column":44,"nodeType":"445","messageId":"446","endLine":28,"endColumn":46},{"ruleId":"443","severity":1,"message":"444","line":26,"column":50,"nodeType":"445","messageId":"446","endLine":26,"endColumn":52},{"ruleId":"443","severity":1,"message":"444","line":27,"column":32,"nodeType":"445","messageId":"446","endLine":27,"endColumn":34},{"ruleId":"443","severity":1,"message":"444","line":24,"column":90,"nodeType":"445","messageId":"446","endLine":24,"endColumn":92},{"ruleId":"443","severity":1,"message":"444","line":24,"column":168,"nodeType":"445","messageId":"446","endLine":24,"endColumn":170},{"ruleId":"497","severity":1,"message":"498","line":31,"column":96,"nodeType":"499","endLine":31,"endColumn":107},{"ruleId":"443","severity":1,"message":"444","line":31,"column":16,"nodeType":"445","messageId":"446","endLine":31,"endColumn":18},{"ruleId":"443","severity":1,"message":"460","line":34,"column":22,"nodeType":"445","messageId":"446","endLine":34,"endColumn":24},{"ruleId":"443","severity":1,"message":"444","line":43,"column":22,"nodeType":"445","messageId":"446","endLine":43,"endColumn":24},{"ruleId":"443","severity":1,"message":"444","line":46,"column":27,"nodeType":"445","messageId":"446","endLine":46,"endColumn":29},{"ruleId":"443","severity":1,"message":"444","line":53,"column":66,"nodeType":"445","messageId":"446","endLine":53,"endColumn":68},{"ruleId":"443","severity":1,"message":"444","line":63,"column":43,"nodeType":"445","messageId":"446","endLine":63,"endColumn":45},"no-native-reassign",["500"],"no-negated-in-lhs",["501"],"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'staffInfo' is assigned a value but never used.","'error' is assigned a value but never used.","'studentLoading' is assigned a value but never used.","'studentInfo' is assigned a value but never used.","'studentError' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'class_code', 'description', 'title', and 'weight'. Either include them or remove the dependency array.","ArrayExpression",["502"],"React Hook useEffect has missing dependencies: 'attendanceSuccess', 'lectureDone', 'staffSignIn.staffInfo.token', 'startDate', 'startTime', and 'students'. Either include them or remove the dependency array.",["503"],"React Hook useEffect has a missing dependency: 'staffSignIn.staffInfo.token'. Either include it or remove the dependency array.",["504"],"'useState' is defined but never used.","'staffSignIn' is assigned a value but never used.","'GET_COURSEWORK_BY_ID_RESET' is defined but never used.","'submit' is assigned a value but never used.","'setSubmit' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'deleteSuccess' and 'updateSuccess'. Either include them or remove the dependency array.",["505"],["500"],["501"],"'displayUpdate' is assigned a value but never used.","'setDisplayUpdate' is assigned a value but never used.","'inProp' is assigned a value but never used.","'setNoStudentsEnrolled' is assigned a value but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","no-dupe-keys","Duplicate key 'sortable'.","ObjectExpression","'getCourseworkByID' is defined but never used.","React Hook useEffect has missing dependencies: 'attendanceSuccess', 'lectureDone', 'startDate', 'startTime', and 'sub.students'. Either include them or remove the dependency array.",["506"],"'EDIT_CW_RESET' is assigned a value but never used.","'GET_STUDENT_COURSEWORK_RESET' is defined but never used.","React Hook useEffect has missing dependencies: 'class_code' and 'update.success'. Either include them or remove the dependency array.",["507"],"'Redirect' is defined but never used.","'UserProfileIcon' is defined but never used.","'getStaffClasses' is defined but never used.","'BsBook' is defined but never used.","'FaChalkboardTeacher' is defined but never used.","React Hook useEffect has missing dependencies: 'staffLoggedIn.classes' and 'staffLoggedIn.departments'. Either include them or remove the dependency array.",["508"],"React Hook useEffect has a missing dependency: 'staffID'. Either include it or remove the dependency array.",["509"],["500"],["501"],"'data' is assigned a value but never used.",["510"],"no-redeclare","'result' is already defined.","redeclared","'temprows' is already defined.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"511","fix":"512"},{"desc":"513","fix":"514"},{"desc":"515","fix":"516"},{"desc":"517","fix":"518"},{"desc":"519","fix":"520"},{"desc":"521","fix":"522"},{"desc":"523","fix":"524"},{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},"Update the dependencies array to be: [class_code, description, dispatch, title, validated, weight]",{"range":"529","text":"530"},"Update the dependencies array to be: [timeValidated, dateValidated, dispatch, class_code, attendanceSuccess, lectureDone, students, staffSignIn.staffInfo.token, startDate, startTime]",{"range":"531","text":"532"},"Update the dependencies array to be: [class_code, dispatch, staffSignIn.staffInfo.token]",{"range":"533","text":"534"},"Update the dependencies array to be: [dispatch, id, class_code, currentCoursework, deleteSuccess, updateSuccess]",{"range":"535","text":"536"},"Update the dependencies array to be: [timeValidated, dateValidated, dispatch, class_code, group_id, sub.students, attendanceSuccess, lectureDone, startDate, startTime]",{"range":"537","text":"538"},"Update the dependencies array to be: [dispatch, cw.marks, coursework_id, student_id, update.success, class_code]",{"range":"539","text":"540"},"Update the dependencies array to be: [staffLoggedIn.classes, staffLoggedIn.departments, staffSignIn]",{"range":"541","text":"542"},"Update the dependencies array to be: [dispatch, notifications, staffID]",{"range":"543","text":"544"},"Update the dependencies array to be: [dispatch, props.class_code, staffSignIn.staffInfo.token]",{"range":"545","text":"546"},[1676,1697],"[class_code, description, dispatch, title, validated, weight]",[3327,3379],"[timeValidated, dateValidated, dispatch, class_code, attendanceSuccess, lectureDone, students, staffSignIn.staffInfo.token, startDate, startTime]",[1224,1246],"[class_code, dispatch, staffSignIn.staffInfo.token]",[2486,2531],"[dispatch, id, class_code, currentCoursework, deleteSuccess, updateSuccess]",[2296,2358],"[timeValidated, dateValidated, dispatch, class_code, group_id, sub.students, attendanceSuccess, lectureDone, startDate, startTime]",[1839,1886],"[dispatch, cw.marks, coursework_id, student_id, update.success, class_code]",[1825,1838],"[staffLoggedIn.classes, staffLoggedIn.departments, staffSignIn]",[2099,2145],"[dispatch, notifications, staffID]",[1130,1158],"[dispatch, props.class_code, staffSignIn.staffInfo.token]"]